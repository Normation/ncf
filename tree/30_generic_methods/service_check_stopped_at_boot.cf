#####################################################################################
# Copyright 2014 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name Service check stopped at boot
# @description Check if a service is set to not start at boot using the appropriate method
#
# @parameter service_name  Service name (as recognized by systemd, init.d, etc...)
# 
# @class_prefix service_check_stopped_at_boot
# @class_parameter service_name
# This bundle will define a class service_check_stopped_at_boot_${service_name}_{kept,ok,not_ok,failed,reached}

bundle agent service_check_stopped_at_boot(service_name)
{
  vars:

    systemctl_utility_present::
      "command_to_check"   string => "!${paths.path[systemctl]} is-enabled ${service_name}";

    !systemctl_utility_present.chkconfig_utility_present::
      "command_to_check"   string => "${paths.path[chkconfig]} --list ${service_name} | grep -q 3:off";

    !systemctl_utility_present.!chkconfig_utility_present::
      "command_to_check"   string => "${paths.path[test]} -f /etc/rc`runlevel | ${paths.path[cut]} -d' ' -f2`.d/K??${service_name}";

    any::

      "canonified_service_name" string => canonify("${service_name}");
      "canonified_command"      string => canonify("${command_to_check}");

      "class_prefix"            string => "service_check_stopped_at_boot_${canonified_service_name}";

  methods:

      "check_run"
        usebundle => command_execution("${command_to_check}");

      "success" usebundle => _classes_success("${class_prefix}"),
        ifvarclass => "command_execution_${canonified_command}_repaired.!command_execution_${canonified_command}_failed";

      "failure" usebundle => _classes_failure("${class_prefix}"),
        ifvarclass => "command_execution_${canonified_command}_failed";

    any::

      "reports" usebundle => _logger("Check if service ${service_name} is not started at boot time", "${class_prefix}");

}
