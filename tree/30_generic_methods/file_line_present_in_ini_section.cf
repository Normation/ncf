#####################################################################################
# Copyright 2013 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name File line in INI section
# @description Ensure that a line is present in a section in a specific location. The objective of this method is to handle INI-style files.
#
# @parameter file File name to edit (absolute path on the target node)
# @parameter section Name of the INI-style section under which lines should be added (not including the [] brackets)
# @parameter line Line to ensure is present inside the section
#
# @class_prefix file_line_present_in_ini_section
# @class_parameter file

bundle agent file_line_present_in_ini_section(file, section, line)
{
  vars:
      "old_class_prefix"       string => canonify("file_line_present_in_ini_section_${file}");
      "args"                    slist => { "${file}", "${section}", "${line}" };
      "report_param"           string => join("_", args);
      "full_class_prefix"      string => canonify("file_line_present_in_ini_section_${report_param}");
      "class_prefix"           string => string_head("${full_class_prefix}", "1000");
      "hash"                   string => hash("${report_param}", "md5");
      "last_line"              string => execresult("/usr/bin/tail -n 1 ${file} #${hash}", "useshell");

    pass2::
      "line_list" slist =>  splitstring("${line}", "${const.n}", "999999");
      "unique_lines" slist =>  unique("line_list");
      "section_content" string => join("${const.n}", "unique_lines");
      "lines_to_insert" string => "[${section}]${const.n}${section_content}",
        ifvarclass => "section_absent";
      "lines_to_insert" string => "${section_content}",
        ifvarclass => "last_line_is_target_section";

  classes:
      "pass3" expression => "pass2";
      "pass2" expression => "pass1";
      "pass1" expression => "any";

      "section_absent"  not => regline("^\[${section}\]$","${file}");
      "last_line_is_target_section" expression => regcmp("\[${section}\]\s*", "${last_line}");

  files:
    pass3::
      # If the section is not present in the file, add it at the end
      # Also, clean the doubled line in the input, since we can not
      # limit the scope to the section, it does not exist yet
      "${file}"
        edit_line     => append_block("${lines_to_insert}"),
        edit_defaults => ncf_empty_select("false"),
        create        => "true",
        ifvarclass    => "section_absent",
        comment       => "If the section or the file does not exist",
        classes       => classes_generic_two("${old_class_prefix}", "${class_prefix}");

      # If the section is empty and the last one, use a different insert method
      # This is due to a limitation issue on the select_region body
      # see https://github.com/cfengine/masterfiles/blob/master/tests/acceptance/lib/files/CFE-1710.cf#L29
      "${file}"
        edit_line     => append_block("${lines_to_insert}"),
        edit_defaults => ncf_empty_select("false"),
        ifvarclass    => "last_line_is_target_section",
        comment       => "Add lines at the end of the file since the target section exists, is empty and is the last one in the file",
        classes       => classes_generic_two("${old_class_prefix}", "${class_prefix}");

      # Add the missing lines after the section.
      "${file}"
        edit_line     => ensure_line_in_ini_section("${section}", "${line}"),
        edit_defaults => ncf_empty_select("false"),
        ifvarclass    => "!section_absent.!last_line_is_target_section",
        classes       => classes_generic_two("${old_class_prefix}", "${class_prefix}");

  methods:
    pass3::
      "sanitize" usebundle => _classes_sanitize("${class_prefix}");
      "sanitize" usebundle => _classes_sanitize("${old_class_prefix}");
      "report"   usebundle => _log_v3("Insert line(s) into ${file}", "${file}", "${old_class_prefix}", "${class_prefix}", @{args});
}

