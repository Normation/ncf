#####################################################################################
# Copyright 2017 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name Variable string from command
# @description Define a variable from a command output
# @documentation To use the generated variable, you must use the form `${variable_prefix.variable_name}` with each name replaced with the parameters of this method.
#
# Be careful that using a global variable can lead to unpredictable content in case of multiple definition, which is implicitly the case when a technique has more than one instance (directive). 
# Please note that only global variables are available within templates.
#
# @parameter variable_prefix The prefix of the variable name
# @parameter variable_name   The variable to define, the full name will be variable_prefix.variable_name
# @parameter command         The command to execute
# 
# @class_prefix variable_string_from_command
# @class_parameter variable_name

bundle agent variable_string_from_command(variable_prefix, variable_name, command)
{
  vars:
      "old_class_prefix"  string => canonify("variable_string_from_command_${variable_name}");
      "promisers"          slist => { @{this.callers_promisers}, cf_null }, policy => "ifdefined";
      "class_prefix"      string => canonify(join("_", "promisers"));
      "args"               slist => { "${variable_prefix}", "${variable_name}", "${file_name}" };

      # Why this ugly code? We need both the result and the return code of the command
      # and we would prefer only executing it once.
      #
      # To achieve this, we concatenate the return code as a three char string, and extract it afterwards.
      #
      # There are two little funny things there:
      # * the $() is considered an undefined variable, and the execresult is skipped. To avoid that,
      #   we add a /bin/true call, to trigger the "shell execution" case that skips undefined variable checks
      # * As verification is now skipped, we do not have to do it for ${OUTPUT}.
      #
      # The pass1 is necessary to avoid evaluating the command in cf-promises,
      # for example when checking promises on the server.
    pass1::
      "temp" string => execresult("OUTPUT=${const.dollar}(/bin/true; ${command}); printf \"%3d\" ${const.dollar}?; echo \"${const.dollar}OUTPUT\"", "useshell");
      "temp_length" int => string_length("${temp}");
      "raw_output_length" string => eval("${temp_length} - 3", "math", "infix");
      "output_length" string => format("%d", "${raw_output_length}");
      "raw_code" string => string_head("${temp}", 3);
      "code" string => format("%d", "${raw_code}");

      # define the variable within the variable_prefix namespace
    pass2::
      "${variable_prefix}.${variable_name}" string =>  string_tail("${temp}", "${output_length}"),
                                        if => "returned_zero";

  classes:
    pass1::
      "returned_zero" expression => strcmp("${code}", "0");

    pass2::
      "variable_defined" expression => isvariable("${variable_prefix}.${variable_name}");

    any::
      "pass3" expression => "pass2";
      "pass2" expression => "pass1";
      "pass1" expression => "any";

  methods:
    pass3.!variable_defined::
      "error"    usebundle => _classes_failure("${old_class_prefix}");
      "error"    usebundle => _classes_failure("${class_prefix}");

    pass3.variable_defined::
      "success"  usebundle => _classes_success("${old_class_prefix}");
      "success"  usebundle => _classes_success("${class_prefix}");

    pass3::
      "report"
        usebundle  => _log("Set the string ${variable_prefix}.${variable_name} to the output of '${command}'", "${old_class_prefix}", "${class_prefix}", @{args});

  reports:
    pass3.info.returned_zero::
      "The '${command}' command returned '${${variable_prefix}.${variable_name}}'";
    pass3.info.!returned_zero::
      "The '${command}' command failed with ${code} code";
}
