#####################################################################################
# Copyright 2014 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name Service restart at a condition
# @description Restart a service using the appropriate method if the specified class is true, otherwise it is considered as not required and success classes are returned.
# @deprecated Use [service_restart](#service_restart) with a condition
# @documentation See [service_action](#service_action) for documentation.
#
# @parameter service_name Name of the service
# @parameter trigger_class class(es) which will trigger the restart of Service "(package_service_installed|service_conf_changed)" by example
# 
# @class_prefix service_restart
# @class_parameter service_name
# @deprecated Use a condition with [service_restart](#service_restart) instead.

bundle agent service_restart_if(service_name, trigger_class)
{
  vars:
    "canonified_service_name"      string => canonify("${service_name}");
    "old_class_prefix"             string => "service_restart_${canonified_service_name}";
    "args"                          slist => { "${service_name}",  "${trigger_class}" };
    "report_param"                 string => join("_", args);
    "class_prefix"                 string => canonify("service_restart_${report_param}");

  classes:
      "should_report"    expression => "${report_data.should_report}";

  methods:
      "disable_reporting_${old_class_prefix}"     usebundle => disable_reporting;

      # Create kept class
      "success_class"              usebundle  => _classes_success("${old_class_prefix}"),
                                   # parenthesis used to negate all the classes
                                   ifvarclass => "!(${trigger_class})";
      "success_class"              usebundle  => _classes_success("${class_prefix}"),
                                   # parenthesis used to negate all the classes
                                   ifvarclass => "!(${trigger_class})";

      "restart"                    usebundle  => service_action("${service_name}", "restart"),
                                   ifvarclass => "${trigger_class}";

      "class copy"                 usebundle  => _classes_copy("service_action_${canonified_service_name}", "${old_class_prefix}"),
                                   ifvarclass => "${trigger_class}";
      "class copy"                 usebundle  => _classes_copy("service_action_${canonified_service_name}", "${class_prefix}"),
                                   ifvarclass => "${trigger_class}";

      "reenable_reporting_${old_class_prefix}"    usebundle => enable_reporting,
                             ifvarclass => "should_report";
      "report"                     usebundle  => _log("Restart service ${canonified_service_name} if '${trigger_class}' condtion defined", "service_restart_${canonified_service_name}", "${class_prefix}", @{args});
}
