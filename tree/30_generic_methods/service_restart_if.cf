#####################################################################################
# Copyright 2014 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name Service restart at a condition
# @description Restart a service using the appropriate method if the specified class is true, otherwise it is considered as not required and success classes are returned.
# @deprecated Use [service_restart](#_service_restart) with a condition
# @documentation See [service_action](#_service_action) for documentation.
#
# @parameter name Name of the service
# @parameter expression Condition expression which will trigger the restart of Service "(package_service_installed|service_conf_changed)" by example
# 
#
# @parameter_rename service_name name
# @parameter_rename trigger_class expression
# @class_prefix service_restart
# @class_parameter name

bundle agent service_restart_if(name, expression)
{
  vars:

      "canonified_name"      string => canonify("${name}");

      "old_class_prefix"             string => "service_restart_${canonified_name}";

      "args"                          slist => { "${name}",  "${expression}" };

      "report_param"                 string => join("_", args);
      "full_class_prefix"            string => canonify("service_restart_${report_param}");
      "class_prefix"                 string => string_head("${full_class_prefix}", "1000");

      "full_inner_class_prefix"      string => canonify("service_action_${name}_restart");
      "inner_class_prefix"           string => string_head("${full_inner_class_prefix}", "1000");

  classes:
      "should_report"    expression => "${report_data.should_report}";

  methods:
      "disable_reporting_${class_prefix}"     usebundle => disable_reporting;

      # Create kept class
      "success_class"              usebundle  => _classes_success("${old_class_prefix}"),
                                   # parenthesis used to negate all the classes
                                   ifvarclass => "!(${expression})";

      "success_class"              usebundle  => _classes_success("${class_prefix}"),
                                   # parenthesis used to negate all the classes
                                   ifvarclass => "!(${expression})";

      "restart"                    usebundle  => service_action("${name}", "restart"),
                                   ifvarclass => "${expression}";

      "class copy"                 usebundle  => _classes_copy("${inner_class_prefix}", "${old_class_prefix}"),
                                   ifvarclass => "${expression}";

      "class copy"                 usebundle  => _classes_copy("${inner_class_prefix}", "${class_prefix}"),
                                   ifvarclass => "${expression}";

      "reenable_reporting_${class_prefix}"
                                    usebundle => enable_reporting,
                                   ifvarclass => "should_report";

      "report"                     usebundle  => _log_v3("Restart service ${canonified_name} if '${expression}' condition defined", "${name}", "service_restart_${canonified_name}", "${class_prefix}", @{args});
}
