#####################################################################################
# Copyright 2017 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name Package state with options
# @agent_version >=3.7
# @description Enforce the state of a package with options
# @documentation See [package_state](#package_state) for documentation.
# 
# @parameter name Name of the package, or path to a local package if state is present
# @parameter version Version of the package, can be "latest" for latest version or "any" for any version (defaults to "any")
# @parameter_constraint version "allow_empty_string" : true
# @parameter architecture Architecture of the package, can be an architecture name  or "default" (defaults to "default")
# @parameter_constraint architecture "allow_empty_string" : true
# @parameter provider Package provider to use, can be "yum", "apt", "zypper", "pkg" or "default" for system default package manager (defaults to "default")
# @parameter_constraint provider "allow_empty_string" : true
# @parameter_constraint provider "select" : [ "", "default", "yum", "apt", "zypper", "pkg" ]
# @parameter state State of the package, can be "present" or "absent" (defaults to "present")
# @parameter_constraint state "allow_empty_string" : true
# @parameter_constraint state "select" : [ "", "present", "absent" ]
# @parameter options Options no pass to the package manager (defaults to empty)
# @parameter_constraint options "allow_empty_string" : true
# 
# @class_prefix package_state_options
# @class_parameter name

bundle agent package_state_options(name, version, architecture, provider, state, options)
{
  vars:

      "canonified_name"           string => canonify("${name}");
      "canonified_state"          string => canonify("${state}");

      "old_class_prefix"          string => "package_state_options_${canonified_name}";
      "promisers"                 slist  => { @{this.callers_promisers}, cf_null }, policy => "ifdefined";
      "class_prefix"              string => canonify(join("_", "promisers"));
      "args"                      slist  => { "${name}", "${state}" };

  defaults:
      "state"                     string => "present", if_match_regex => "";


  classes:
      "should_report"    expression => "${report_data.should_report}";

  methods:
      "disable_reporting"     usebundle => disable_reporting;

      "action"                 usebundle => ncf_package("${name}", "${version}", "${architecture}", "${provider}", "${state}", "${options}");

      "reenable_reporting"    usebundle => enable_reporting,
                             if => "should_report";
      "class copy"             usebundle => _classes_copy("ncf_package_${canonified_state}_${canonified_name}", "${old_class_prefix}"),
                              if => "ncf_package_${canonified_state}_${canonified_name}_reached";
      "new result classes"     usebundle => _classes_copy("${class_prefix}_action", "${class_prefix}"),
                              if => "${class_prefix}_action_reached";

      # For compatibility with previous version of the generic method
      "class copy compat"      usebundle => _classes_copy("ncf_package_${canonified_state}_${canonified_name}", "package_${canonified_state}_${canonified_name}"),
                              if => "ncf_package_${canonified_state}_${canonified_name}_reached";

      "report"                 usebundle => _log("${ncf_package.message}", "${old_class_prefix}", "${class_prefix}", @{args}),
                              if => "(!has_promiser_stack.${old_class_prefix}_reached)|(has_promiser_stack.${class_prefix}_reached)";
}
