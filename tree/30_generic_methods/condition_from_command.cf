#####################################################################################
# Copyright 2015 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name Condition from command 
# @description Execute a command and create result conditions depending on its exit code
# @documentation This bundle will define a condition `condition_from_command_${condition_prefix}_{kept,not_ok,ok,reached}`
# depending on the exit codes given in parameters.
#
# This bundle will additionally produce a `${condition_prefix}_true` or a `${condition_prefix}_false` condition depending on the result on the command:
#
# * If the exit code is in the `true_codes` list, this will produce a kept outcome condition and a `${condition_prefix}_true` condition
# * If the exit code is in the `false_codes` list, this will produce a repaired outcome condition and a `${condition_prefix}_false` condition
# * If the exit code is not in the list, this will produce an error outcome condition and no conditions with `${condition_prefix}`
#
# The created condition (class in cfengine speaking) is global to the agent.
#
# @parameter condition_prefix   The condition name
# @parameter command            The command to run
# @parameter true_codes         List of codes that produce a true status separated with commas (ex: 1,2,5)
# @parameter false_codes        List of codes that produce a false status separated with commas (ex: 3,4,6)
# 
# @class_prefix condition_from_command
# @class_parameter condition_prefix

bundle agent condition_from_command(condition_prefix, command, true_codes, false_codes)
{
  vars:
      "old_class_prefix"  string => canonify("condition_from_command_${condition_prefix}");
      "args"               slist => { "${condition_prefix}", "${command}", "${true_codes}", "${false_codes}" };
      "report_param"      string => join("_", args);
      "class_prefix"      string => canonify("condition_from_command_${report_param}");

      "true_list"     slist => splitstring("${true_codes}", "\s*,\s*", "256");
      "false_list"    slist => splitstring("${false_codes}", "\s*,\s*", "256");

  methods:
      "report"
        usebundle  => _log("Execute the test command ${command} to create ${condition_prefix}_{true,false}", "${old_class_prefix}", "${class_prefix}", @{args}),
        ifvarclass => "(!has_promiser_stack.${old_class_prefix}_reached)|(has_promiser_stack.${class_prefix}_reached)";

  commands:
      "${command}"
        contain      => in_shell,
        classes      => classes_generic_return_boolean_list_two("${old_class_prefix}", "${class_prefix}", "${condition_prefix}", @{true_list}, @{false_list});
}
