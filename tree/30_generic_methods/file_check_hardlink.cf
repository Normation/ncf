#####################################################################################
# Copyright 2013 Normation SAS
# Copyright 2016 Janos Mattyasovszky
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name File check is hardlink
# @description Checks if two files are the same (hard links)
#
# @parameter file_name_1   File name #1
# @parameter file_name_2   File name #2
# 
# @class_prefix file_check_hardlink
# @class_parameter file_name_1
# This bundle will define a class file_check_hardlink_${file_name_1}_{ok, reached, kept} if the
# two files ${file_name_1} and ${file_name_2} are hard links of each other, or file_check_hardlink_${file_name_1}_{not_ok, reached, not_kept, failed} if
# if the files are not hard links.

bundle agent file_check_hardlink(file_name_1, file_name_2)
{
  vars:
      "class_prefix"        string => canonify("file_check_hardlink_${file_name_1}");
      "file_1_devno"        string => filestat("${file_name_1}", "devno");
      "file_1_ino"          string => filestat("${file_name_1}", "ino");
      "file_2_devno"        string => filestat("${file_name_2}", "devno");
      "file_2_ino"          string => filestat("${file_name_2}", "ino");


  classes:
      "file_1_exists"           expression => fileexists("${file_name_1}");
      "file_2_exists"           expression => fileexists("${file_name_2}");
      "files_match_device"      expression => strcmp("${file_1_devno}", "${file_2_devno}");
      "files_match_inode"       expression => strcmp("${file_1_ino}",   "${file_2_ino}");
      "files_are_hardlinks"     expression => "file_1_exists.file_2_exists.files_match_device.files_match_inode";


  methods:
    files_are_hardlinks::
      "files_are_hardlinks"
        usebundle => _classes_success("${class_prefix}");

    !files_are_hardlinks::
      "files_are_not_hardlinks"
        usebundle => _classes_failure("${class_prefix}");

    any::
      "report"
        usebundle => _logger("Check if ${file_name_1} and ${file_name_2} are the same", "${class_prefix}");
}
