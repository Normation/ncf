#####################################################################################
# Copyright 2015 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name Condition from expression
# @description Create a new condition
# @documentation This bundle will define a condition `condition_from_expression_${condition_prefix}_{kept,ok,reached}`
#
# This bundle will additionally produce a `${condition_prefix}_true` or a `${condition_prefix}_false` condition depending on the result on the expression:
#
# * If the expression results in a "defined" state, this will produce a kept outcome class and a `${condition_prefix}_true` condition
# * If the expression results in an "undefined" state, this will produce a kept outcome class and a `${condition_prefix}_false` condition
#
# Calling this method with a condition expression transforms a complex expression into a single condition.
#
# The created condition (class in CFEngine speaking) is global to the agent.
#
# @parameter condition_prefix     The condition prefix
# @parameter condition_expression The expression evaluated to create the condition (use 'any' to always evaluate to true)
#
# @class_prefix condition_from_expression
# @class_parameter condition_prefix

bundle agent condition_from_expression(condition_prefix, condition_expression)
{
  vars:
      "old_class_prefix"  string => canonify("condition_from_expression_${condition_prefix}");
      "args"               slist => { "${condition_prefix}", "${condition_expression}" };
      "report_param"      string => join("_", args);
      "class_prefix"      string => canonify("condition_from_expression_${report_param}");

  classes:
      "${condition_prefix}_true"  expression => "${condition_expression}",
                                       scope => "namespace";

      "${condition_prefix}_false" expression => "!(${condition_expression})",
                                       scope => "namespace";

  methods:
      "success" usebundle => _classes_success("${old_class_prefix}");
      "success" usebundle => _classes_success("${class_prefix}");

      "report"  usebundle => _log("Create the condition ${condition_prefix}_{true,false} with ${condition_expression}", "${old_class_prefix}", "${class_prefix}", @{args});
}
