#####################################################################################
# Copyright 2013 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name File download
# @description Download a file if it does not exist, using curl with a fallback on wget
# @rename file_from_http_server
# @deprecated Use [file_from_http_server](#file_from_http_server) instead.
# @documentation This method finds a HTTP command-line tool and downloads the given source
# into the destination.
# 
# It tries `curl` first, and `wget` as fallback.
#
# @parameter source      URL to download from
#Â @parameter destination File destination (absolute path on the target node)
# 
# @class_prefix file_download
# @class_parameter destination

bundle agent file_download(source, destination)
{

  vars:

    any::

      "canonified_destination"    string => canonify("${destination}");

      "old_class_prefix"          string => "file_download_${canonified_destination}";
      "promisers"          slist => { @{this.callers_promisers}, cf_null }, policy => "ifdefined";
      "class_prefix"      string => canonify(join("_", "promisers"));
      "args"                       slist => { "${source}", "${destination}" };

  methods:
    "action"             usebundle => file_from_http_server("${target}");
    "class copy"         usebundle => _classes_copy("file_from_http_server_${canonified_destination}", "${old_class_prefix}"),
                         ifvarclass => "file_from_http_server_${canonified_destination}_reached";
    "new result classes" usebundle => _classes_copy("${class_prefix}_action", "${class_prefix}"),
                         ifvarclass => "${class_prefix}_action_reached";
    "report"             usebundle => _log("Download ${source} into ${destination}", "${old_class_prefix}", "${class_prefix}", @{args});

}
