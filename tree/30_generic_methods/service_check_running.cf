#####################################################################################
# Copyright 2013 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name Service check running
# @description Check if a service is running using the appropriate method
#
# @parameter name  Process name
#
#
# @parameter_rename service_name name
# @class_prefix service_check_running
# @class_parameter name

bundle agent service_check_running(name)
{
  vars:
      "canonified_name"         string => canonify("${name}");

      "old_class_prefix"        string => canonify("service_check_running_${name}");

      "args"                     slist => { "${name}" };
      "report_param"            string => join("_", args);
      "full_class_prefix"       string => canonify("service_check_running_${report_param}");
      "class_prefix"            string => string_head("${full_class_prefix}", "1000");

      "full_inner_class_prefix" string => canonify("ncf_services_${report_param}_is_active");
      "inner_class_prefix"      string => string_head("${full_inner_class_prefix}", "1000");



  classes:
      "should_report"       expression => "${report_data.should_report}";

  methods:
      "disable_reporting_${class_prefix}"
                             usebundle => disable_reporting;
      "check_active"         usebundle => ncf_services("${name}", "is-active");

      "reenable_reporting_${class_prefix}"
                             usebundle => enable_reporting,
                            ifvarclass => "should_report";
      "class copy"           usebundle => _classes_copy("ncf_services_${canonified_name}_is_active", "${old_class_prefix}"),
                            ifvarclass => "ncf_services_${canonified_name}_is_active_reached";
      "new result classes"   usebundle => _classes_copy("${inner_class_prefix}", "${class_prefix}"),
                            ifvarclass => "${inner_class_prefix}_reached";

      "report"             usebundle => _log_v3("Check if the service ${name} is started", "${name}", "${old_class_prefix}", "${class_prefix}", @{args});
}
