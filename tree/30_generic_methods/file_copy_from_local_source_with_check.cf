#####################################################################################
# Copyright 2018 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name File copy from local source with check
# @rename file_from_local_source_with_check
# @deprecated Use [file_from_local_source_with_check](#file_from_local_source_with_check) instead.

# @description Ensure that a file or directory is copied from a local source if a check command succeeds
# @documentation This method is a conditionnal file copy.
#
# @parameter source      Source file (absolute path on the target node)
# @parameter destination Destination file (absolute path on the target node)
# @parameter check_command   Command to run, it will get the source path as argument
# @parameter rc_ok       Return codes to be considered as valid, separated by a comma (default is 0)
# @parameter_constraint  rc_ok "allow_empty_string" : true
# 
# @class_prefix file_copy_from_local_source_with_check
# @class_parameter destination

bundle agent file_copy_from_local_source_with_check(source, destination, check_command, rc_ok)
{
  vars:
      "old_class_prefix" string => canonify("file_copy_from_local_source_with_check_${destination}");
      "promisers"          slist => { @{this.callers_promisers}, cf_null }, policy => "ifdefined";
      "class_prefix"      string => canonify(join("_", "promisers"));
      "args"              slist => { "${source}", "${destination}", "${check_command}" };
      "canonified_file"   string => canonify("${destination}");


  classes:
      "should_report"    expression => "${report_data.should_report}";

  methods:
      "disable_reporting"     usebundle => disable_reporting;
    "action"             usebundle => file_from_local_source_with_check("${source}", "${destination}", "${check_command}", "${rc_ok}");
      "reenable_reporting"    usebundle => enable_reporting,
                             if => "should_report";
    "class copy"         usebundle => _classes_copy("file_from_local_source_with_check_${canonified_file}", "${old_class_prefix}"),
                         if => "file_from_local_source_with_check_${canonified_file}_reached";
    "new result classes" usebundle => _classes_copy("${class_prefix}_action", "${class_prefix}"),
                         if => "${class_prefix}_action_reached";
    "report"             usebundle  => _log("Copying ${destination} from ${source} with check", "${old_class_prefix}", "${class_prefix}", @{args});

}
