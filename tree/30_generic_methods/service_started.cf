#####################################################################################
# Copyright 2013 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name Service started
# @description Ensure that a service is running using the appropriate method
#
# @parameter name Service name (as recognized by systemd, init.d, etc...)
# 
#
# @parameter_rename service_name name
# @class_prefix service_started
# @class_parameter name

bundle agent service_started(name)
{
  vars:
      "canonified_name" string => canonify("${name}");

      "old_class_prefix"        string => "service_started_${canonified_name}";

      "args"                     slist => { "${name}" };
      "report_param"            string => join("_", args);
      "full_class_prefix"       string => canonify("service_started_${report_param}");
      "class_prefix"            string => string_head("${full_class_prefix}", "1000");

      "full_inner_class_prefix" string => canonify("service_start_${report_param}");
      "inner_class_prefix"      string => string_head("${full_inner_class_prefix}", "1000");

      "full_inner_class_prefix_check" string => canonify("service_check_running_${report_param}");
      "inner_class_prefix_check"      string => string_head("${full_inner_class_prefix_check}", "1000");

  classes:
      "should_report"       expression => "${report_data.should_report}";

  methods:
      "disable_reporting_${class_prefix}"
                      usebundle => disable_reporting;
    
      "check_running" usebundle  => service_check_running("${name}");

      "start if not running"
                      usebundle  => service_start("${name}"),
                      ifvarclass => "!${inner_class_prefix_check}_kept";

      "class copy if not running"
                      usebundle  => _classes_copy("service_start_${canonified_name}", "${old_class_prefix}"),
                      ifvarclass => "!${inner_class_prefix_check}_kept";

      "class copy if not running"
                      usebundle  => _classes_copy("service_start_${canonified_name}", "${class_prefix}"),
                      ifvarclass => "!${inner_class_prefix_check}_kept";

      "class if running"
                      usebundle  => _classes_success("${class_prefix}"),
                      ifvarclass => "${inner_class_prefix_check}_kept";

      "class if running"
                      usebundle  => _classes_success("${old_class_prefix}"),
                      ifvarclass => "${inner_class_prefix_check}_kept";
 
 
      "reenable_reporting_${class_prefix}"
                           usebundle => enable_reporting,
                          ifvarclass => "should_report";
      "report"
        usebundle  => _log_v3("Ensure that service ${name} is running", "${name}", "${old_class_prefix}", "${class_prefix}", @{args});

}
