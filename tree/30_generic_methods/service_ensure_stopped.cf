#####################################################################################
# Copyright 2013 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name Service ensure stopped
# @description Ensure that a service is stopped using the appropriate method
#
# @parameter service_name Service
# 
# @class_prefix service_ensure_stopped
# @class_parameter service_name

bundle agent service_ensure_stopped(service_name)
{
  vars:

    "canonified_service_name"      string => canonify("${service_name}");

    "old_class_prefix"             string => "service_ensure_stopped_${canonified_service_name}";
    "promisers"          slist => { @{this.callers_promisers}, cf_null }, policy => "ifdefined";
    "class_prefix"      string => canonify(join("_", "promisers"));
    "args"                          slist => { "${service_name}" };

  methods:
    !windows::
      "check running"
        usebundle  => service_check_running("${service_name}");

      # If service_check_running has detected a process, it will result in
      # a success, so we have to stop the process
      "stop if running"
        usebundle  => service_stop("${service_name}"),
        ifvarclass => "(!has_promiser_stack.service_check_running_${canonified_service_name}_kept)|(has_promiser_stack.${class_prefix}_check_running_kept)";

      # If service_check_running has no detected any process, it will not result
      # in a success so the result class of this promise should be the a success.
      "create success class"
        usebundle  => _classes_success("${old_class_prefix}"),
        ifvarclass => "(!has_promiser_stack.!service_check_running_${canonified_service_name}_kept)|(has_promiser_stack.!${class_prefix}_check_running_kept)";
 
     # If service_check_running has detected a process, the process will be
     # stopped and the result class should be the same as this promise.
      "class copy if running"
        usebundle  => _classes_copy("service_stop_${canonified_service_name}", "${old_class_prefix}"),
        ifvarclass => "service_check_running_${canonified_service_name}_kept";

      "class copy if running"
        usebundle  => _classes_copy("${class_prefix}_stop_if_running", "${class_prefix}"),
        ifvarclass => "has_promiser_stack.${class_prefix}_check_running_kept";

    any::
      "report"
        usebundle  => _log("Ensure that service ${service_name} is stopped", "${old_class_prefix}", "${class_prefix}", @{args}),
        ifvarclass =>"(!has_promiser_stack.${old_class_prefix}_reached)|(has_promiser_stack.!${class_prefix}_reached)";

  services:
    windows::
      "${service_name}"
        service_policy => "stop",
        classes        => classes_generic_two("${old_class_prefix}", "${class_prefix}");
}
