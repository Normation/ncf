#####################################################################################
# Copyright 2014 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name Service check at boot
# @description Check if a service is set to start at boot using the appropriate method
#
# @parameter service_name  Service name (as recognized by systemd, init.d, etc...)
#
# @class_prefix service_check_started_at_boot
# @class_parameter service_name
# This bundle will define a class service_check_started_at_boot_${service_name}_{kept,ok,not_ok,failed,reached}

bundle agent service_check_started_at_boot(service_name)
{
  vars:

    pass2.systemctl_utility_present.!broken_systemctl::
      "command_to_check"   string => "${paths.path[systemctl]} is-enabled ${service_name}.service";

    pass2.!systemctl_utility_present.chkconfig_utility_present::
      "command_to_check"   string => "${paths.path[chkconfig]} --list ${service_name} | grep -q -e 3:on -e B:on";

    pass2.(!(systemctl_utility_present|chkconfig_utility_present)|broken_systemctl)::
      "command_to_check"   string => "${paths.path[test]} -f /etc/rc`runlevel | ${paths.path[cut]} -d' ' -f2`.d/S??${service_name}";

    any::

      "canonified_service_name" string => canonify("${service_name}");
      "canonified_command"      string => canonify("${command_to_check}");

      "old_class_prefix"        string => "service_check_started_at_boot_${canonified_service_name}";
      "class_prefix"            string => canonify(join("_", "this.callers_promisers"));

  classes:

      "pass2"               expression => "pass1";
      "pass1"               expression => "any";

      # This is to workaround a bug in Debian Jessie, that makes systemctl is-enabled
      # fail if run against a service that still uses SysV style scripts
      # See https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=760616
      "init_script_present" expression => fileexists("/etc/init.d/${service_name}");
      "broken_systemctl"    expression => "debian_8.init_script_present";

  methods:

    pass2::

      "check_run"
        usebundle => command_execution("${command_to_check}");

      "success" usebundle => _classes_success("${old_class_prefix}"),
        ifvarclass => "command_execution_${canonified_command}_repaired.!command_execution_${canonified_command}_failed";

      "success" usebundle => _classes_success("${class_prefix}"),
        ifvarclass => "has_promiser_stack.(${class_prefix}_check_run_repaired.!${class_prefix}_check_run_failed)";

      "failure" usebundle => _classes_failure("${old_class_prefix}"),
        ifvarclass => "command_execution_${canonified_command}_failed";

      "failure" usebundle => _classes_failure("${class_prefix}"),
        ifvarclass => "${class_prefix}_check_run_failed";

      "reports" usebundle => _logger("Ensure that service ${service_name} is defined at boot", "${old_class_prefix}");
}
