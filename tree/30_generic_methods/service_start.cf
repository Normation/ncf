#####################################################################################
# Copyright 2013-2014 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name Service start
# @description Start a service using the appropriate method
# @deprecated This is an action that should not be used in the general case.
# If you really want to call the start method, use [service_action](#_service_action).
# Otherwise, simply call [service_started](#_service_started)
# @documentation See [service_action](#_service_action) for documentation.
#
# @parameter name Name of the service
# 
#
# @parameter_rename service_name name
# @class_prefix service_start
# @class_parameter name

bundle agent service_start(name)
{
  vars:

      "canonified_name" string => canonify("${name}");

      "old_class_prefix"        string => "service_start_${canonified_name}";

      "args"                     slist => { "${name}" };

      "full_class_prefix"       string => canonify("service_start_${name}");
      "class_prefix"            string => string_head("${full_class_prefix}", "1000");

      "full_inner_class_prefix" string => canonify("service_action_${name}_start");
      "inner_class_prefix"      string => string_head("${full_inner_class_prefix}", "1000");


  classes:
      "should_report"    expression => "${report_data.should_report}";

  methods:
      "disable_reporting_${class_prefix}"
                   usebundle => disable_reporting;

      "start"      usebundle => service_action("${name}", "start");

      "reenable_reporting_${class_prefix}"
                   usebundle => enable_reporting,
                  ifvarclass => "should_report";

      "class copy" usebundle => _classes_copy("${inner_class_prefix}", "${old_class_prefix}");

      "class copy" usebundle => _classes_copy("${inner_class_prefix}", "${class_prefix}");

      "report"     usebundle => _log_v3("Start service ${name}", "${name}", "${old_class_prefix}", "${class_prefix}", @{args});

}
