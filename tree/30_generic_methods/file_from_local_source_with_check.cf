#####################################################################################
# Copyright 2018 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name File from local source with check
# @description Ensure that a file or directory is copied from a local source if a check command succeeds
# @documentation This method is a conditional file copy.
#
# It allows comparing the source and destination, and if they are different, call a command
# with the source file path as argument, and only update the destination if the commands succeeds
# (i.e. returns a code included in rc_ok).
#
# #### Examples
# 
# ```
# # To copy a configuration file only if it passes a config test:
# file_from_local_source_with_check("/tmp/program.conf", "/etc/program.conf", "program --config-test", "0");
# ```
#
# This will:
#
# * Compare `/tmp/program.conf` and `/etc/program.conf`, and return `kept` if files are the same
# * If not, it will execute `program --config-test "/tmp/program.conf"` and check the return code
# * If it is one of the `rc_ok` codes, it will copy `/tmp/program.conf` into `/etc/program.conf` and return a repaired
# * If not, it will return an error
#
# @parameter source      Source file (absolute path on the target node)
# @parameter path         Destination file (absolute path on the target node)
# @parameter check_command   Command to run, it will get the source path as argument
# @parameter rc_ok       Return codes to be considered as valid, separated by a comma (default is 0)
# @parameter_constraint  rc_ok "allow_empty_string" : true
#
# 
# @parameter_rename destination path
# @class_prefix file_from_local_source_with_check
# @class_parameter path

bundle agent file_from_local_source_with_check(source, path, check_command, rc_ok)
{
  vars:
      "old_class_prefix" string => canonify("file_from_local_source_with_check_${path}");

      "args"              slist => { "${source}", "${path}", "${check_command}", "${rc_ok}"};
      "report_param"      string => join("_", args);
      "full_class_prefix" string => canonify("file_from_local_source_with_check_${report_param}");
      "class_prefix"      string => string_head("${full_class_prefix}", "1000");

      "canonified_path"   string => canonify("${path}");

    pass1::
      "full_inner_class_file_copy_prefix" string => canonify("file_from_local_source_${source}_${path}");
      "inner_class_file_copy_prefix"      string => string_head("${full_inner_class_file_copy_prefix}", "1000");

      "full_inner_class_condition_prefix" string => canonify("condition_from_command_${old_class_prefix}_check_${check_command} \"${source}\"_${rc_ok}_999");
      "inner_class_condition_prefix"      string => string_head("${full_inner_class_condition_prefix}", "1000");





  defaults:
      "rc_ok"             string => "0", if_match_regex => "";

  classes:
    agent::
      "destination_exists" expression => fileexists("${path}");
      # We might need to copy if destination file exists and diff is not 0, or there's no destination file
      "copy_needed"               not => returnszero("${paths.path[diff]} \"${source}\" \"${path}\"", "useshell"),
                           ifvarclass => "destination_exists";
      "copy_needed"               not => "destination_exists";

      "should_report"    expression => "${report_data.should_report}";

    any::
      # We need pass, as rc_ok may be defined after the vars
      "pass2" expression => "pass1";
      "pass1" expression => "any";


  methods:
    pass2::
      "disable_reporting_${class_prefix}"
                       usebundle => disable_reporting;
      "check"          usebundle => condition_from_command("file_from_local_source_with_check_${canonified_path}_check", "${check_command} \"${source}\"", "${rc_ok}", "999"),
                      ifvarclass => "copy_needed";
      "copy"           usebundle => file_from_local_source("${source}", "${path}"),
                      ifvarclass => "${inner_class_condition_prefix}_kept"; # the condition from command true is equivalent to inner_class_prefix_kept

      "reenable_reporting_${class_prefix}"
                       usebundle => enable_reporting,
                      ifvarclass => "should_report";
      "result" usebundle => _classes_success("${old_class_prefix}"),
              ifvarclass => "!copy_needed";
      "result" usebundle => _classes_success("${class_prefix}"),
              ifvarclass => "!copy_needed";


                            # here we are not using file_from_local_source_with_check_${canonified_path}_check_false as we want to allow any return code
                            # which is different from rc_ok as failure.
      "result" usebundle => _classes_failure("${old_class_prefix}"),
              ifvarclass => "${inner_class_condition_prefix}_error";
      "result" usebundle => _classes_failure("${class_prefix}"),
              ifvarclass => "${inner_class_condition_prefix}_error";


      "result" usebundle => _classes_copy("${inner_class_file_copy_prefix}", "${old_class_prefix}"),
              ifvarclass => "${inner_class_condition_prefix}_kept";
      "result" usebundle => _classes_copy("${inner_class_file_copy_prefix}", "${class_prefix}"),
              ifvarclass => "${inner_class_condition_prefix}_kept";


      "report" usebundle => _log_v3("Copying ${path} from local ${source} with check", "${path}", "${old_class_prefix}", "${class_prefix}", @{args}),
              ifvarclass => "!${inner_class_condition_prefix}_failed";
      "report" usebundle => _log_v3("Copying ${path} from local ${source} failed at check command", "${path}", "${old_class_prefix}", "${class_prefix}", @{args}),
              ifvarclass => "${inner_class_condition_prefix}_failed";
}
