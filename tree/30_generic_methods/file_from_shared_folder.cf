#####################################################################################
# Copyright 2013 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name File copy from Rudder shared folder 
# @description Ensure that a file or directory is copied from Rudder shared folder (/var/rudder/configuration-repository/shared-files)
#
# @parameter source      Source file (path relative to Rudder shared folder)
# @parameter destination Destination file (absolute path on the target node)
# @parameter hash_type   Hash algorithm used to check if file is updated (md5, sha1, sha256). Only used on dsc agent, cfengine agent use it's own system for now. 
# @parameter_constraint hash_type  "select" : [ "md5", "sha1", "sha256" ]
# 
# @class_prefix file_from_shared_folder
# @class_parameter destination

bundle agent file_from_shared_folder(source, destination, hash_type)
{
  vars:
      "canonified_destination" string => canonify("${destination}");

      "old_class_prefix"       string => "file_from_shared_folder_${canonified_destination}";
      "promisers"               slist => { @{this.callers_promisers}, cf_null }, policy => "ifdefined";
      "class_prefix"           string => canonify(join("_", "promisers"));
      "args"                    slist => { "${source}", "${destination}" };


  classes:
      "should_report"    expression => "${report_data.should_report}";

  methods:
      "disable_reporting"     usebundle => disable_reporting;
      "copy without recursion" usebundle => file_copy_from_remote_source_recursion("/var/rudder/configuration-repository/shared-files/${source}", "${destination}", "0");
      "reenable_reporting"    usebundle => enable_reporting,
                             if => "should_report";
      "class copy"             usebundle => _classes_copy("file_copy_from_remote_source_${canonified_destination}", "${old_class_prefix}");
      "new result classes"     usebundle => _classes_copy("${class_prefix}_copy_without_recursion", "${class_prefix}");


      "report"                 usebundle => _log("Copying ${destination} from ${source}", "${old_class_prefix}", "${class_prefix}", @{args});
}
