#####################################################################################
# Copyright 2014 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name File remove
# @description Remove a file if it exists
# @rename file_absent
# @deprecated Use [file_absent](#file_absent) instead.
#
# @parameter target     File to remove (absolute path on the target node)
#
# @class_prefix file_remove
# @class_parameter target

bundle agent file_remove(target)
{
  vars:
    "canonified_target"    string => canonify("${target}");

    "old_class_prefix" string => canonify("file_remove_${target}");
    "promisers"          slist => { @{this.callers_promisers}, cf_null }, policy => "ifdefined";
    "class_prefix"      string => canonify(join("_", "promisers"));
    "args"              slist => { "${target}" };


  classes:
      "should_report"    expression => "${report_data.should_report}";

  methods:
      "disable_reporting"     usebundle => disable_reporting;
    "action"             usebundle => directory_present("${target}");
      "reenable_reporting"    usebundle => enable_reporting,
                             if => "should_report";
    "class copy"         usebundle => _classes_copy("file_absent_${canonified_target}", "${old_class_prefix}"),
                         if => "file_absent_${canonified_target}_reached";
    "new result classes" usebundle => _classes_copy("${class_prefix}_action", "${class_prefix}"),
                         if => "${class_prefix}_action_reached";
    "report"             usebundle => _log("Remove file ${target}", "${old_class_prefix}", "${class_prefix}", @{args});
}
