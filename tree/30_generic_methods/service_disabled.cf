#####################################################################################
# Copyright 2017 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name Service disabled at boot
# @description Force a service not to be enabled at boot
#
# @parameter service_name Service name (as recognized by systemd, init.d, etc...)
#
# @class_prefix service_disabled
# @class_parameter service_name
# This bundle will define a condition service_disabled_${canonified_service_name}_{kept,repaired,not_ok,ok,reached}

bundle agent service_disabled(service_name)
{
  vars:
      "canonified_service_name" string => canonify("${service_name}");
      "old_class_prefix"        string => "service_disabled_${canonified_service_name}";
      "args"                     slist => { "${service_name}" };
      "report_param"            string => join("_", args);
      "class_prefix"            string => canonify("service_disabled_${report_param}");

  classes:
      "should_report"    expression => "${report_data.should_report}";

  methods:
      "disable_reporting_${old_class_prefix}"     usebundle => disable_reporting;

    !windows::
      "disable_at_boot"
        usebundle => service_check_disabled_at_boot("${service_name}");

      "undefine_at_boot"
        usebundle => ncf_services("${service_name}", "disable"),
        ifvarclass => "service_check_disabled_at_boot_${canonified_service_name}_not_ok";

    !windows::
      "already undefined"
        usebundle  => _classes_success("${old_class_prefix}"),
        ifvarclass => "service_check_disabled_at_boot_${canonified_service_name}_ok";
      "already undefined"
        usebundle  => _classes_success("${class_prefix}"),
        ifvarclass => "service_check_disabled_at_boot_${canonified_service_name}_ok";

      "copy classes"
        usebundle  => _classes_copy("ncf_services_${canonified_service_name}_disable", "${old_class_prefix}"),
        ifvarclass => "service_check_disabled_at_boot_${canonified_service_name}_not_ok";
      "copy new classes"
        usebundle  => _classes_copy("ncf_services_${canonified_service_name}_disable", "${class_prefix}"),
        ifvarclass => "service_check_disabled_at_boot_${canonified_service_name}_not_ok";

    windows::
      "action"             usebundle => service_stop("${service_name}");

      "class copy"         usebundle => _classes_copy("service_stop_${canonified_service_name}", "${old_class_prefix}"),
                          ifvarclass => "service_stop_${canonified_service_name}_reached";
      "new class copy"     usebundle => _classes_copy("service_stop_${canonified_service_name}", "${class_prefix}"),
                          ifvarclass => "service_stop_${canonified_service_name}_reached";

    any::
      "reenable_reporting_${old_class_prefix}"    usebundle => enable_reporting,
                             ifvarclass => "should_report";
      "report"
        usebundle => _log("Ensure service ${service_name} is disabled at boot", "${old_class_prefix}", "${class_prefix}", @{args});
}
