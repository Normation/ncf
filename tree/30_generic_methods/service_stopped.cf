#####################################################################################
# Copyright 2013 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name Service stopped
# @description Ensure that a service is stopped using the appropriate method
#
# @parameter service_name Service
# 
# @class_prefix service_stopped
# @class_parameter service_name

bundle agent service_stopped(service_name)
{
  vars:
    "canonified_service_name"      string => canonify("${service_name}");
    "old_class_prefix"             string => "service_stopped_${canonified_service_name}";
    "args"                          slist => { "${service_name}" };
    "report_param"                 string => join("_", args);
    "class_prefix"                 string => canonify("${old_class_prefix}_${report_param}");

  classes:
      "should_report"    expression => "${report_data.should_report}";

  methods:
      "disable_reporting_${old_class_prefix}"     usebundle => disable_reporting;

    !windows::
      "check running"
        usebundle  => service_check_running("${service_name}");

      # If service_check_running has detected a process, it will result in
      # a success, so we have to stop the process
      "stop if running"
        usebundle  => service_stop("${service_name}"),
        ifvarclass => "service_check_running_${canonified_service_name}_kept";

      # If service_check_running has no detected any process, it will not result
      # in a success so the result class of this promise should be the a success.
      "create success class"
        usebundle  => _classes_success("${old_class_prefix}"),
        ifvarclass => "!service_check_running_${canonified_service_name}_kept";
      "create success class"
        usebundle  => _classes_success("${class_prefix}"),
        ifvarclass => "!service_check_running_${canonified_service_name}_kept";
 
     # If service_check_running has detected a process, the process will be
     # stopped and the result class should be the same as this promise.
      "class copy if running"
        usebundle  => _classes_copy("service_stop_${canonified_service_name}", "${old_class_prefix}"),
        ifvarclass => "service_check_running_${canonified_service_name}_kept";
      "class copy if running"
        usebundle  => _classes_copy("service_stop_${canonified_service_name}", "${class_prefix}"),
        ifvarclass => "service_check_running_${canonified_service_name}_kept";

    windows::
      "action"             usebundle => service_stop("${service_name}");

      "class copy"         usebundle => _classes_copy("service_stop_${canonified_service_name}", "${old_class_prefix}"),
                          ifvarclass => "service_stop_${canonified_service_name}_reached";
      "new class copy"     usebundle => _classes_copy("service_stop_${canonified_service_name}", "${class_prefix}"),
                          ifvarclass => "service_stop_${canonified_service_name}_reached";

    any::
      "reenable_reporting_${old_class_prefix}"    usebundle => enable_reporting,
                             ifvarclass => "should_report";
      "report"
        usebundle  => _log("Ensure that service ${service_name} is stopped", "${old_class_prefix}", "${class_prefix}", @{args});
}
