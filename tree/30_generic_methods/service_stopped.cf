#####################################################################################
# Copyright 2013 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name Service stopped
# @description Ensure that a service is stopped using the appropriate method
#
# @parameter name Service
# 
#
# @parameter_rename service_name name
# @class_prefix service_stopped
# @class_parameter name

bundle agent service_stopped(name)
{
  vars:

      "canonified_name"    string => canonify("${name}");

      "old_class_prefix"           string => "service_stopped_${canonified_name}";

      "args"                        slist => { "${name}" };
      "report_param"               string => join("_", args);
      "full_class_prefix"          string => canonify("service_stopped_${report_param}");
      "class_prefix"               string => string_head("${full_class_prefix}", "1000");

      "full_inner_class_prefix_check"   string => canonify("service_check_running_${report_param}");
      "inner_class_prefix_check"        string => string_head("${full_inner_class_prefix_check}", "1000");

      "full_inner_class_prefix_stop"    string => canonify("service_stop_${report_param}");
      "inner_class_prefix_stop"         string => string_head("${full_inner_class_prefix_stop}", "1000");

  classes:
      "should_report"    expression => "${report_data.should_report}";

  methods:
      "disable_reporting_${class_prefix}"
         usebundle => disable_reporting;

      "check running"
        usebundle  => service_check_running("${name}");

      # If service_check_running has detected a process, it will result in
      # a success, so we have to stop the process
      "stop if running"
        usebundle  => service_stop("${name}"),
        ifvarclass => "${inner_class_prefix_check}_kept";

      # If service_check_running has no detected any process, it will not result
      # in a success so the result class of this promise should be the a success.
      "create success class"
        usebundle  => _classes_success("${old_class_prefix}"),
        ifvarclass => "!${inner_class_prefix_check}_kept";
 
     # If service_check_running has detected a process, the process will be
     # stopped and the result class should be the same as this promise.
      "class copy if running"
        usebundle  => _classes_copy("${inner_class_prefix_stop}", "${old_class_prefix}"),
        ifvarclass => "${inner_class_prefix_check}_kept";

      "class copy if running"
        usebundle  => _classes_copy("${inner_class_prefix_stop}", "${class_prefix}"),
        ifvarclass => "${inner_class_prefix_check}_kept";

      "reenable_reporting_${class_prefix}"
                           usebundle => enable_reporting,
                          ifvarclass => "should_report";
      "report"
        usebundle  => _log_v3("Ensure that service ${name} is stopped", "${name}", "${old_class_prefix}", "${class_prefix}", @{args});

}
