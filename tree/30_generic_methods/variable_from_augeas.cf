#####################################################################################
# Copyright 2020 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################
#
# @name Variable from Augeas 
# @description Use Augeas binary to call Augtool command and get a node's label value.
# @documentation There is two way you can use this method, either you simply provide a path to the node label as a parameter or you can specify a file associated with a lens then the regular path. 
# The generic method will get a node's label vaule otherwise if the augeas isn't installed on the agent, it will produces an error.
#
# #### Two uses cases examples:
# 
# # Use case 1: To simply get the value of the ip address of the first line in the '/etc/hosts' file ('label' and 'value' are naming examples of 'variable_prefix' and 'variable_name')
# variable_from_augeas("label","value","etc/hosts/1/ipaddr");
# # Use case 2: To associate the 'Hosts' lens with the '/etc/hosts' file then get the node value
# variable_from_augeas("label","value","etc/hosts/1/ipaddr","Hosts","/etc/hosts");
#
# @parameter variable_prefix The prefix of the variable name
# @parameter variable_name   The variable to define, the full name will be variable_prefix.variable_name
# @parameter path            The path to the file and node label
# @parameter lens            The lens specified by the user in case he wants to load a specified lens associated with its file
# @parameter file            The file specified by the user in case he wants to load a specified file associated with its lens
# @parameter_constraint file "allow_empty_string" : true
# @parameter_constraint lens "allow_empty_string" : true
# @class_prefix variable_from_augeas
# @class_parameter variable_name


bundle agent variable_from_augeas(variable_prefix, variable_name, path, lens, file)
{
 vars:       
     "old_class_prefix" string => canonify("variable_from_augeas_${variable_name}");
     "promisers" slist => { @{this.callers_promisers}, cf_null }, policy => "ifdefined";
     "class_prefix" string => canonify(join("_", "promisers"));
     "args" slist => {"${variable_prefix}", "${variable_name}", "${path}", "${lens}", "${file}"};

   pass1.file_defined::
     "case1" string => execresult("/usr/bin/env printf \"set /augeas/load/${lens}/lens \"${lens}.lns\" \n set /augeas/load/${lens}/incl \"${file}\" \n load \n get /files/${path}\" | augtool --noautoload","useshell");
     "data" data => data_regextract("=(.*)", "$(case1)");
     "${variable_prefix}.${variable_name}" string => "$(data[1])";

   pass1.!file_defined::
     "case2" string => execresult("/usr/bin/env augtool get /files/'${path}'","useshell");
     "data" data => data_regextract("=(.*)", "$(case2)");
     "${variable_prefix}.${variable_name}" string => "$(data[1])";
 
 reports:
    "${${variable_prefix}.${variable_name}}";

 classes:
    "pass2" expression => "pass1";
    "pass1";

   pass2::
     "variable_defined" expression => isvariable("${variable_prefix}.${variable_name}");  
     "augeas_binaries" expression => fileexists("/usr/bin/augtool");
   
   pass1::
     "file_defined" expression => not(strcmp("${file}",""));

 methods: 
    pass2.augeas_variable.variable_defined::
       "success" usebundle => _classes_success("${old_class_prefix}");
       "success" usebundle => _classes_success("${class_prefix}");
       "report" usebundle => _log("Getting the node value from ${file}", "${old_class_prefix}", "${class_prefix}", @{args});

    pass2.!augeas_binaries.variable_defined::
      "failure" usebundle => _classes_failure("${old_class_prefix}");
      "failure" usebundle => _classes_failure("${class_prefix}");
      "report" usebundle => _log("Augeas binaries does not exist. Getting the node value from ${path}", "${old_class_prefix}", "${class_prefix}", @{args});

    pass2.!augeas_binaries.!variable_defined::
      "failure" usebundle => _classes_failure("${old_class_prefix}");
      "failure" usebundle => _classes_failure("${class_prefix}");
      "report" usebundle => _log("Augeas binaries does not exist. Getting the node value from ${path}", "${old_class_prefix}", "${class_prefix}", @{args});      

    pass2.augeas_binaries.!variable_defined::
      "failure" usebundle => _classes_failure("${old_class_prefix}");
      "failure" usebundle => _classes_failure("${class_prefix}");
      "report" usebundle => _log("Augeas binaries does exist, but your request has failed. Getting the node value from ${path}","${old_class_prefix}", "${class_prefix}", @{args});
    
}

