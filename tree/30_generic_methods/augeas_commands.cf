#####################################################################################
# Copyright 2020 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################
#
# @name Augeas Commands
# @description Use augeas binaries commands to edit configuration files on the agent. 
# The generic method will return the command execution output otherwise if the augeas isn't installed on the agent, it will produces an error.
#
# @parameter variable_prefix The prefix of the variable name
# @parameter variable_name   The variable to define, the full name will be variable_prefix.variable_name
# @parameter commands        The augeas command 
# @parameter noautoload      Activate the '--no autoload' option if you don't want augeas to charge all the files/lens, it's false by default. 
# @class_prefix augeas_commands
# @class_parameter variable_name
# @parameter_constraint noautoload "allow_empty_string" : true
# @parameter_constraint noautoload "select" : [ "", "true", "false" ]

bundle agent augeas_commands(variable_prefix, variable_name, commands, noautoload)
{
 vars:       
     "old_class_prefix" string => canonify("augeas_commands_${variable_name}");
     "promisers" slist => { @{this.callers_promisers}, cf_null }, policy => "ifdefined";
     "class_prefix" string => canonify(join("_", "promisers"));
     "args" slist => {"${variable_prefix}", "${variable_name}", "${commands}", "${noautoload}"};

   pass1.noautoload_defined::
     "${variable_prefix}.${variable_name}" string =>  execresult("/usr/bin/env printf \"${commands}\" | augtool --noautoload","useshell"); 

   pass1.!noautoload_defined::
     "${variable_prefix}.${variable_name}" string =>  execresult("/usr/bin/env printf \"${commands}\" | augtool","useshell");
  
 defaults:
     "noautoload" string => "false", if_match_regex => "";

 classes:
    "pass2" expression => "pass1";
    "pass1";

   pass1::
     "noautoload_defined" expression => strcmp("${noautoload}", "true");

   pass2::
     "variable_defined" expression => isvariable("${variable_prefix}.${variable_name}");  
     "augeas_binaries" expression => fileexists("/usr/bin/augtool");
    
 methods: 
    pass2.augeas_variable.variable_defined::
       "success" usebundle => _classes_success("${old_class_prefix}");
       "success" usebundle => _classes_success("${class_prefix}");
       "report" usebundle => _log("Executing ${commands}", "${old_class_prefix}", "${class_prefix}", @{args});

    pass2.!augeas_binaries::
      "failure" usebundle => _classes_failure("${old_class_prefix}");
      "failure" usebundle => _classes_failure("${class_prefix}");
      "report" usebundle => _log("Augeas binaries does not exist.", "${old_class_prefix}", "${class_prefix}", @{args});

    pass2.augeas_binaries.!variable_defined::
      "failure" usebundle => _classes_failure("${old_class_prefix}");
      "failure" usebundle => _classes_failure("${class_prefix}");
      "report" usebundle => _log("Augeas binaries does exist, but your request has failed. Executing ${commands}","${old_class_prefix}", "${class_prefix}", @{args});
    
}


