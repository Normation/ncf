#####################################################################################
# Copyright 2015 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name Group absent
# @description Make sure a group is absent
# @agent_version >=3.6
#
# @parameter group Group name

# @class_prefix group_absent
# @class_parameter group

bundle agent group_absent(group)
{
  vars:
      "old_class_prefix"  string => canonify("group_absent_${group}");
      "promisers"          slist => { @{this.callers_promisers}, cf_null }, policy => "ifdefined";
      "class_prefix"      string => canonify(join("_", "promisers"));
      "args"               slist => { "${group}" };

  classes:
      "group_present" expression => groupexists("${group}");
      "pass2" expression => "pass1";
      "pass1" expression => "any";

  methods:
    !group_present::
      "success"     usebundle => _classes_success("${old_class_prefix}");
      "success"     usebundle => _classes_success("${class_prefix}");

    group_present.windows::
      "unsupported" usebundle => _classes_failure("${old_class_prefix}");
      "unsupported" usebundle => _classes_failure("${class_prefix}");

    pass2::
      "report"
        usebundle => _log("Group ${group} absent", "${old_class_prefix}", "${class_prefix}", @{args}),
        ifvarclass => "(!has_promiser_stack.${old_class_prefix}_reached)|(has_promiser_stack.${class_prefix}_reached)";

  commands:
    group_present.!windows.!aix::
      "/usr/sbin/groupdel ${group}" classes => classes_generic_two("${old_class_prefix}", "${class_prefix}");
    group_present.aix::
      "/usr/bin/rmgroup ${group}"   classes => classes_generic_two("${old_class_prefix}", "${class_prefix}");
}
