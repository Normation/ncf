#####################################################################################
# Copyright 2017 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name File ensure key value parameter in list
# @rename file_key_value_parameter_present_in_list
# @deprecated Use [file_key_value_parameter_present_in_list](#file_key_value_parameter_present_in_list) instead.
# @description Ensure that one parameter exists in a list of parameters, on one single line, in the right hand side of a key->values line
# @documentation Edit the file, and ensure it contains the defined parameter in the list of values on the right hand side of a key->values line.
# If the parameter is not there, it will be added at the end, separated by parameter_separator.
# Optionnaly, you can define leading and closing character to enclose the parameters
# If the key does not exist in the file, it will be added in the file, along with the parameter
#
# #### Example
# 
# If you have an initial file (`/etc/default/grub`) containing
# 
# ```
# GRUB_CMDLINE_XEN="dom0_mem=16G"
# ```
#
# To add parameter `dom0_max_vcpus=32` in the right hand side of the line, you'll need the following policy
#
# ```
# file_ensure_key_value_parameter_in_list("/etc/default/grub", "GRUB_CMDLINE", "=", "dom0_max_vcpus=32", " ", "\"", "\"");
# ```
#
# @parameter file File name to edit (absolute path on the target node)
# @parameter key Full key name
# @parameter key_value_separator character used to separate key and value in a key-value line
# @parameter parameter String representing the sub-value to ensure is present in the list of parameters that form the value part of that line
# @parameter parameter_separator Character used to separate parameters in the list
# @parameter leading_char_separator leading character of the parameters
# @parameter closing_char_separator closing character of the parameters
# @parameter_constraint key_value_separator "allow_whitespace_string" : true
# @parameter_constraint parameter_separator "allow_whitespace_string" : true
# @parameter_constraint leading_char_separator "allow_empty_string" : true
# @parameter_constraint closing_char_separator "allow_empty_string" : true
#
# @class_prefix file_ensure_key_value_parameter_in_list
# @class_parameter file

bundle agent file_ensure_key_value_parameter_in_list(file, key, key_value_separator, parameter, parameter_separator, leading_char_separator, closing_char_separator)
{
  vars:
      "old_class_prefix" string => canonify("file_ensure_key_value_parameter_in_list_${file}");
      "promisers"          slist => { @{this.callers_promisers}, cf_null }, policy => "ifdefined";
      "class_prefix"      string => canonify(join("_", "promisers"));
      "args"              slist => { "${file}", "${key}", "${key_value_separator}", "${parameter}", "${parameter_separator}", "${leading_char_separator}", "${closing_char_separator}" };
      "canonified_file"    string => canonify("${file}");


  classes:
      "should_report"    expression => "${report_data.should_report}";

  methods:
      "disable_reporting"     usebundle => disable_reporting;
    "action"             usebundle => file_key_value_parameter_present_in_list("${file}", "${key}", "${key_value_separator}", "${parameter_regex}", "${parameter_separator}", "${leading_char_separator}", "${closing_char_separator}");
      "reenable_reporting"    usebundle => enable_reporting,
                             if => "should_report";
    "class copy"         usebundle => _classes_copy("file_key_value_parameter_present_in_list_${canonified_file}", "${old_class_prefix}"),
                         if => "file_key_value_parameter_present_in_list_${canonified_file}_reached";
    "new result classes" usebundle => _classes_copy("${class_prefix}_action", "${class_prefix}"),
                         if => "${class_prefix}_action_reached";
    "report"   usebundle => _log("Ensure ${parameter} in line ${key}${key_value_separator} values in ${file}", "${old_class_prefix}", "${class_prefix}", @{args});
}
