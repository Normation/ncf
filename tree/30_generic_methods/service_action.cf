#####################################################################################
# Copyright 2014 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name Service action
# @description Trigger an action on a service using tools like systemctl, service, init.d, Windows...
#
# @parameter service_name Service
# @parameter action Action to trigger on the service (start, stop, restart, reload, ...)
# 
# @class_prefix service_action
# @class_parameter service_name
# This bundle will define a class service_action_${service_name}_{kept,repaired,not_ok,ok,reached}

bundle agent service_action(service_name, action)
{
  vars:

    systemctl_utility_present::

      "action_command"            string => "${paths.path[systemctl]} ${action} ${service_name}.service";

    !systemctl_utility_present.service_utility_present::

      "action_command"            string => "${paths.path[service]} ${service_name} ${action}";

    !systemctl_utility_present.!service_utility_present.init_d_directory_present::

      "action_command"            string => "/etc/init.d/${service_name} ${action}";

    any::

      "canonified_service_name"   string => canonify("${service_name}");
      "canonified_action_command" string => canonify("${action_command}");

      "old_class_prefix"          string => "service_action_${canonified_service_name}";
      "class_prefix"              string => canonify(join("_", "this.callers_promisers"));

  classes:
    windows::
      "is_valid_action"               or => {
                                              strcmp("start", "${action}"),
                                              strcmp("stop", "${action}"),
                                              strcmp("restart", "${action}"),
                                            };
      "is_restart_action"     expression => strcmp("restart", "${action}");

  methods:

    systemctl_utility_present|service_utility_present|init_d_directory_present::

      "action using command"      usebundle => command_execution("${action_command}");

      "class copy"                usebundle => _classes_copy("command_execution_${canonified_action_command}", "${old_class_prefix}");
      "new result classes"        usebundle => _classes_copy("${class_prefix}_action_using_command", "${class_prefix}");

    systemctl_utility_present|service_utility_present|init_d_directory_present|(windows.is_valid_action)::

      "report"                    usebundle => _logger("Run action ${action} on service ${service_name}", "${old_class_prefix}"),
                                 ifvarclass => "(!has_promiser_stack.${old_class_prefix}_reached)|(has_promiser_stack.${class_prefix}_reached)";

    (!systemctl_utility_present.!service_utility_present.!init_d_directory_present.!windows)|(windows.!is_valid_action)::

      "force_failure_class"       usebundle => _classes_failure("${old_class_prefix}");
      "force_failure_class"       usebundle => _classes_failure("${class_prefix}");
      "report"                    usebundle => _logger("Running ${action} on service ${service_name} is not possible yet on this system", "${old_class_prefix}");

  services:
    # Restart causes the agent to fail, so we must replace it by stop and start
    windows.is_valid_action.!is_restart_action::
      "${service_name}"
        service_policy => "${action}",
        classes        => classes_generic_two("${old_class_prefix}", "${class_prefix}");

    windows.is_restart_action::
      "${service_name}"
        service_policy => "stop",
        classes        => classes_generic_two("${old_class_prefix}_stop_service", "${class_prefix}_stop_service");

      "${service_name}"
        service_policy => "start",
        classes        => classes_generic_two("${old_class_prefix}", "${class_prefix}"),
        ifvarclass     => "(!has_promiser_stack.${old_class_prefix}_stop_service_ok)|(has_promiser_stack.${class_prefix}_stop_service_ok)";

}
