#####################################################################################
# Copyright 2014 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name Service action
# @description Trigger an action on a service using the appropriate tool
# @action is-* commands are not actions, but all other commands are
#
# @documentation The `service_*` methods manage the services running on the system.
#
# #### Parameters
#
# ##### Service name
#
# The name of the service is the name understood by the service manager, except for the
# `is-active-process` action, where it is the regex to match against the running processes list.
#
# ##### Action
#
# The action is the name of an action to run on the given service.
# The following actions can be used:
#
# * `start`
# * `stop`
# * `restart`
# * `reload` (or `refresh`)
# * `is-active` (or `status`)
# * `is-active-process` (in this case, the "service" parameter is the regex to match againt process list)
# * `enable`
# * `disable`
# * `is-enabled`
#
# Other actions may also be used, depending on the selected service manager.
#
# #### Implementation
#
# These methods will detect the method to use according to the platform. You can run the methods with an `info`
# verbosity level to see which service manager will be used for a given action.
#
# WARNING: Due to compatibility issues when mixing calls to systemctl and service/init.d,
# when an init script exists, we will not use systemctl compatibility layer but directly service/init.d.
#
# The supported service managers are:
#
# * systemd (any unknown action will be passed directly)
# * upstart
# * smf (for Solaris)
# * service command (for non-boot actions, any unknown action will be passed directly)
# * /etc/init.d scripts (for non-boot actions, any unknown action will be passed directly)
# * SRC (for AIX) (for non-boot actions)
# * chkconfig (for boot actions)
# * update-rc.d (for boot actions)
# * chitab (for boot actions)
# * links in /etc/rcX.d (for boot actions)
# * Windows services
#
# #### Examples
#
# ```
# # To restart the apache2 service
# service_action("apache2", "restart");
# service_restart("apache2");
# ```
#
# @parameter name Name of the service
# @parameter action Action to trigger on the service (start, stop, restart, reload, ...)
#
# 
# @parameter_rename service_name name
# @class_prefix service_action
# @class_parameter name

bundle agent service_action(name, action)
{
  vars:

      "canonified_name"   string => canonify("${name}");
      "canonified_action"         string => canonify("${action}");

      "old_class_prefix"          string => "service_action_${canonified_name}";

      "args"                      slist  => { "${name}", "${action}" };
      "report_param"              string => join("_", args);
      "full_class_prefix"         string => canonify("service_action_${report_param}");
      "class_prefix"              string => string_head("${full_class_prefix}", "1000");

      "full_inner_class_prefix"   string => canonify("ncf_services_${report_param}");
      "inner_class_prefix"        string => string_head("${full_inner_class_prefix}", "1000");


  classes:
      "should_report"    expression => "${report_data.should_report}";

  methods:
      "disable_reporting_${class_prefix}"
                               usebundle => disable_reporting;

      "action"                 usebundle => ncf_services("${name}", "${action}");

      "reenable_reporting_${class_prefix}"
                               usebundle => enable_reporting,
                              ifvarclass => "should_report";
      "class copy"             usebundle => _classes_copy("${inner_class_prefix}", "${old_class_prefix}"),
                              ifvarclass => "${inner_class_prefix}_reached";
      "new result classes"     usebundle => _classes_copy("${inner_class_prefix}", "${class_prefix}"),
                              ifvarclass => "${inner_class_prefix}_reached";

      "report"                 usebundle => _log_v3("Run action ${action} on service ${name}", "${name}", "${old_class_prefix}", "${class_prefix}", @{args});
}
