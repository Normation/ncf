#####################################################################################
# Copyright 2017 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name User password hash
# @description Ensure a user's password.
# @documentation User must exists, password must be pre-hashed. Does not handle 
#   empty password accounts.
#
# @parameter login User login
# @parameter password User password
# 
# @class_prefix user_password_hash
# @class_parameter login

bundle agent user_password_hash(login, password)
{
  vars:
      "old_class_prefix"  string => canonify("user_password_hash_${login}");
      "promisers"          slist => { @{this.callers_promisers}, cf_null }, policy => "ifdefined";
      "class_prefix"      string => canonify(join("_", "promisers"));
      "args"               slist => { "${login}" };

  classes:
      "${login}_exists" expression => userexists("${login}");

      # with variables that are not unique, the emptyness detection is quite tricky
      # either the variable is not defined, or the variable value is ""
      "password_not_empty_${login}" not => strcmp("", "${password}");
      "args_defined" expression => "password_not_empty_${login}.${login}_exists";


  files:

    aix.args_defined::
      # On AIX, if password is supplied and user must exist, then the second field needs to be a ! to allow login
      "/etc/passwd"
        create        => "false",
        edit_line     => set_colon_field("${login}", "2", "!"),
        edit_defaults => ncf_empty_select("false"),
        classes       => classes_generic("${old_class_prefix}_aix_etc_shadow");

    !aix.args_defined::
      # Define password when user has already been created
      "/etc/shadow"
        create        => "false",
        edit_line     => set_user_field("${login}", 2, "${password}"),
        edit_defaults => ncf_empty_select("false"),
        classes       => classes_generic_two("${old_class_prefix}", "${class_prefix}");


    aix.args_defined::
      "/etc/security/passwd"
        create        => "false",
        edit_line     => ncf_ensure_AIX_password("${login}", "${password}"),
        edit_defaults => ncf_empty_select("false"),
        classes       => classes_generic("${old_class_prefix}_aix_etc_security_passwd");

      # set the last update date if password has been updated
      "/etc/security/passwd"
        create        => "false",
        edit_line     => ncf_edit_lastupdate_AIX_password("${login}"),
        edit_defaults => ncf_empty_select("false"),
        ifvarclass    => "${old_class_prefix}_repaired";

  methods:
    aix::
      "merge_classes"
        usebundle => _classes_combine_two("${old_class_prefix}_aix_etc_shadow", "${old_class_prefix}_aix_etc_security_passwd", "${old_class_prefix}");
    !args_defined::
      "error" usebundle => _classes_failure("${old_class_prefix}");
      "error" usebundle => _classes_failure("${class_prefix}");

      "report_error"
        usebundle => _log("User ${login} does not exist. Setting password for user ${login}", "${old_class_prefix}", "${class_prefix}", @{args}),
          ifvarclass => "${login}_exists";

      "report_error"
        usebundle => _log("Password entry empty, setting user ${login} password", "${old_class_prefix}", "${class_prefix}", @{args}),
          ifvarclass => "!password_not_empty_${login}";

    args_defined::
      "report_success"
        usebundle => _log("The setting of user ${login} password ", "${old_class_prefix}", "${class_prefix}", @{args}),
          ifvarclass => "(!has_promiser_stack.${old_class_prefix}_reached)|(has_promiser_stack.${class_prefix}_reached).password_not_empty_${login}";
}

