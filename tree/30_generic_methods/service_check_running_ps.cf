#####################################################################################
# Copyright 2013 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name Service check running ps
# @description Check if a service is running using ps
#
# @parameter service_regex Regular expression used to select a process in ps output
# 
# @class_prefix service_check_running
# @class_parameter service_regex
# This bundle will define a class service_check_running_${service_regex}_{kept,not_ok}

bundle agent service_check_running_ps(service_regex)
{
  vars:
      "old_class_prefix" string => canonify("service_check_running_${service_regex}");
      "promisers"          slist => { @{this.callers_promisers}, cf_null }, policy => "ifdefined";
      "class_prefix"      string => canonify(join("_", "promisers"));
      "args"               slist => { "${service_regex}" };

  classes:
    any::
      "pass2" expression => "pass1";
      "pass1" expression => "any";

  methods:
    pass2::
      "success_classes"
        usebundle  => _classes_success("${old_class_prefix}"),
        ifvarclass => "${old_class_prefix}_checked_ok";

      "success_classes"
        usebundle  => _classes_success("${class_prefix}"),
        ifvarclass => "has_promiser_stack.${class_prefix}_checked_ok";

      "error_classes"
        usebundle  => _classes_failure("${old_class_prefix}"),
        ifvarclass => "${old_class_prefix}_checked_not_ok";

      "error_classes"
        usebundle  => _classes_failure("${class_prefix}"),
        ifvarclass => "has_promiser_stack.${class_prefix}_checked_not_ok";

      "report"
        usebundle  => _log("Check if the service ${service_regex} is started using ps", "${old_class_prefix}", "${class_prefix}", @{args});

  processes:

      "${service_regex}"
        process_count => any_count_two("${old_class_prefix}_checked_ok", "${class_prefix}_checked_ok");

      "${service_regex}"
        # missing new_class_prefix : we cannot put 2 classes here, so we put the only one that we are sure works
        restart_class => "${old_class_prefix}_checked_not_ok";

}
