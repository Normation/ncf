#####################################################################################
# Copyright 2017 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name Sharedfile to node
# @description This method shares a file with another Rudder node
# @documentation This method shares a file with another Rudder node using a unique file identifier.
#  The file will be kept on the policy server and transmitted to the destination node's policy server if it is different.
#  It will be kept on this server for the destination node to download as long as it is not replaced by a new
#  file with the same id or remove by expiration of the TTL. 
#  The TTL can be a number of second or a string of the long form "1day 2hours 3minute 4seconds" or abbreviated in the form "5h 3s"
#  Example: 
# ```
# sharedfile_to_node("73570beb-2d4a-43d2-8ffc-f84a6817849c", "application.properties", "/srv/db/application.properties", "356days")
# ```
#  Please not that this methods must be used on a Rudder agent (>=4.1) that is connected to
#  Rudder relay or server (>=4.1)
#
# @parameter target_uuid  which node to share the file with
# @parameter file_id      unique name that will be used to identify the file on the receiver
# @parameter file_path    path of the file to share
# @parameter ttl          time to keep the file on the policy server in seconds or in human readable form (see long description)
# 
# @class_prefix sharedfile_to_node
# @class_parameter file_id

bundle agent sharedfile_to_node(target_uuid, file_id, file_path, ttl)
{
  vars:
      "old_class_prefix"  string => canonify("sharedfile_to_node_${file_id}");
      "promisers"          slist => { @{this.callers_promisers}, cf_null }, policy => "ifdefined";
      "class_prefix"      string => canonify(join("_", "promisers"));
      "args"              slist  => { "${target_uuid}", "${file_id}", "${file_path}", "${ttl}" };

      "canonified_path"   string => canonify("${file_path}");
      "url"               string => "https://${def.policy_server}/rudder/relay-api/shared-files/${target_uuid}/${g.uuid}/${file_id}";

      "hash"              string => execresult("sed -n '/^hash_value=/s/^hash_value=//p' ${file_path}.sign", "useshell"),
                      ifvarclass => "${canonified_path}_signed";


  classes:
    any::
      "pass3" expression => "pass2";
      "pass2" expression => "pass1";
      "pass1" expression => "any";
      "${canonified_path}_signed" expression => fileexists("${file_path}.sign");

      # classes for _classes_combine_ifthenelse
      "${old_class_prefix}_exist_true" expression => "${old_class_prefix}_exist_kept";
      "${old_class_prefix}_exist_false" expression => "${old_class_prefix}_exist_repaired";
      "${class_prefix}_exist_true" expression => "${class_prefix}_exist_kept";
      "${class_prefix}_exist_false" expression => "${class_prefix}_exist_repaired";

      "check_failed" expression => "${old_class_prefix}_exist_error|${class_prefix}_exist_error";

  methods:
    !_stdlib_path_exists_curl|check_failed::
      "force_failure_class old"   usebundle => _classes_failure("${old_class_prefix}");
      "force_failure_class"       usebundle => _classes_failure("${class_prefix}");
    !_stdlib_path_exists_curl::
      "report"                    usebundle => _log("Unable to perform a HTTP queries on ${url}: curl is not installed", "${old_class_prefix}", "${class_prefix}", @{args});
    check_failed::
      "report"                    usebundle => _log("Unable to contact HTTP server on ${url} from sharedfile_to_node", "${old_class_prefix}", "${class_prefix}", @{args});

    _stdlib_path_exists_curl.!check_failed.pass3::
      "result"                    usebundle => _classes_combine_ifthenelse("${old_class_prefix}_exist", "success", "${old_class_prefix}_uploaded", "${old_class_prefix}");
      "result"                    usebundle => _classes_combine_ifthenelse("${class_prefix}_exist", "success", "${class_prefix}_uploaded", "${class_prefix}");

      "report"                    usebundle => _log("Sharing ${file_path} with ${target_uuid} under the name ${file_id} for ${ttl}", "${old_class_prefix}", "${class_prefix}", @{args});

  commands:
    _stdlib_path_exists_curl::
      "/opt/rudder/bin/rudder-sign"
        args => "${file_path} 1.1",
        classes => classes_generic("${canonified_path}_signed"),
        ifvarclass => "!${canonified_path}_signed";

    _stdlib_path_exists_curl.pass2::
      "${paths.path[curl]}"
        args => "${url}?hash=${hash} -k -1 -L --head -o /dev/null -s -f ", 
        contain => in_shell,
        classes => classes_generic_return_single_code_two("${old_class_prefix}_exist", "${class_prefix}_exist", "0", "22", "999"), # 22 = http 400 or above
        ifvarclass => "${canonified_path}_signed";

      "echo | cat ${file_path}.sign - ${file_path} | ${paths.path[curl]}"
        args => "${url}?ttl=${ttl} -k -1 -L -X PUT -o /dev/null -s -f -H 'Content-Type: application/octet-stream' --data-binary @-",
        contain => in_shell,
        classes => classes_generic_return_single_code_two("${old_class_prefix}_uploaded", "${class_prefix}_uploaded", "0", "22", "999"), # 22 = http 400 or above
        ifvarclass => "${canonified_path}_signed.(${old_class_prefix}_exist_repaired|${class_prefix}_exist_repaired)";
}
