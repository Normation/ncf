#####################################################################################
# Copyright 2013 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name Classes copy
# @description Copy a class prefix to another one, to switch the context from a bundle to another
#
# @parameter source_prefix      The prefix of the source class to copy
# @parameter destination_prefix The prefix of the destination class to copy
#
# @destination_prefix 
# @class_parameter 
# This bundle will define a class ${destination_prefix}_{kept,repaired,not_ok,ok,reached}
# based on ${source_prefix}_{kept,repaired,not_ok,ok,reached}

bundle agent _classes_copy(source_prefix, destination_prefix)
{
  vars:
      "prefix" slist => { "promise_kept", "promise_repaired", "repair_failed", "repair_denied", "repair_timeout" };
      "suffix" slist => { "repaired", "ok", "reached", "failed", "not_ok", "not_kept", "not_repaired", "denied", "timeout", "kept", "error" };

    destination_exists::
      # Copy result classes prefixes
      "${prefix}_local_destination_prefix"
        string     => "${prefix}_${destination_prefix}",
        ifvarclass => "${prefix}_${source_prefix}",
        classes    => always("${prefix}_${destination_prefix}");

      # Copy result classes suffixes
      "local_destination_prefix_${suffix}"
        string     => "${destination_prefix}_${suffix}",
        ifvarclass => "${source_prefix}_${suffix}",
        classes    => always("${destination_prefix}_${suffix}");

  classes:
      # this line will not ne evaluated by cfengine if destination_prefix contains a variable that do not exist
      # and it will always be evaluated to true otherwise
      "destination_exists" expression => strcmp("${destination_prefix}", "${destination_prefix}");
}

