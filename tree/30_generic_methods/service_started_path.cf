#####################################################################################
# Copyright 2014 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name Service started with service path
# @description Ensure that a service is running using the appropriate method, specifying the path of the service in the ps output, or using Windows task manager
# 
# @parameter service_name Service name (as recognized by systemd, init.d, Windows, etc...)
# @parameter service_path Service with its path, as in the output from 'ps'

# @class_prefix service_started
# @class_parameter service_name

bundle agent service_started_path(service_name, service_path)
{
  vars:

    "canonified_service_name"      string => canonify("${service_name}");
    "canonified_service_path"      string => canonify("${service_path}");

    "old_class_prefix"             string => "service_started_${canonified_service_name}";
    "promisers"          slist => { @{this.callers_promisers}, cf_null }, policy => "ifdefined";
    "class_prefix"      string => canonify(join("_", "promisers"));
    "args"                          slist => { "${service_name}", "${service_path}" };


  classes:
      "should_report"    expression => "${report_data.should_report}";

  methods:
      "disable_reporting"     usebundle => disable_reporting;
    !windows::
      "check running" usebundle  => service_check_running_ps("${service_path}");

    !windows.has_promiser_stack::
      "start if not running"
        usebundle  => service_start("${service_name}"),
        if => "!${class_prefix}_check_running_kept";

    any::
      "reenable_reporting"    usebundle => enable_reporting,
                             if => "should_report";
    !windows.has_promiser_stack::
      "class copy if not running"
        usebundle  => _classes_copy("${class_prefix}_start_if_not_running", "${class_prefix}"),
        if => "!${class_prefix}_check_running_kept";

      "class if running"
        usebundle  => _classes_success("${class_prefix}"),
        if => "${class_prefix}_check_running_kept";
 
    !windows.!has_promiser_stack::
      "start if not running"
        usebundle  => service_start("${service_name}"),
        if => "!service_check_running_${canonified_service_path}_kept";

      "class copy if not running"
        usebundle  => _classes_copy("service_start_${canonified_service_name}", "${old_class_prefix}"),
        if => "!service_check_running_${canonified_service_path}_kept";

      "class if running"
        usebundle  => _classes_success("${old_class_prefix}"),
        if => "service_check_running_${canonified_service_path}_kept";
 
    windows::
      "action"             usebundle => service_start("${service_name}");

      "class copy"         usebundle => _classes_copy("service_start_${canonified_service_name}", "${old_class_prefix}"),
                          if => "service_start_${canonified_service_name}_reached";
      "new result classes" usebundle => _classes_copy("${class_prefix}_action", "${class_prefix}"),
                          if => "${class_prefix}_action_reached";

    any::
      "report"
        usebundle  => _log("Ensure that service ${service_name} is running", "${old_class_prefix}", "${class_prefix}", @{args}),
        if => "(!has_promiser_stack.${old_class_prefix}_reached)|(has_promiser_stack.${class_prefix}_reached)";

}
