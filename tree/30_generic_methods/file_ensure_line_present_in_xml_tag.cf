#####################################################################################
# Copyright 2014 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name File ensure line in XML section
# @rename file_line_present_in_xml_tag
# @deprecated Use [file_line_present_in_xml_tag](#file_line_present_in_xml_tag) instead.
# @description Ensure that a line is present in a tag in a specific location. The objective of this method is to handle XML-style files. Note that if the tag is not present in the file, it won't be added, and the edition will fail.
#
# @parameter file File name to edit (absolute path on the target node)
# @parameter tag Name of the XML tag under which lines should be added (not including the <> brackets)
# @parameter line Line to ensure is present inside the section
#
# @class_prefix file_ensure_line_present_in_xml_tag
# @class_parameter file

bundle agent file_ensure_line_present_in_xml_tag(file, tag, line)
{
  vars:
      "old_class_prefix" string => canonify("file_ensure_line_present_in_xml_tag_${file}");
      "promisers"          slist => { @{this.callers_promisers}, cf_null }, policy => "ifdefined";
      "class_prefix"      string => canonify(join("_", "promisers"));
      "args"              slist => { "${file}", "${tag}", "${line}" };
      "canonified_file"    string => canonify("${file}");



  classes:
      "should_report"    expression => "${report_data.should_report}";

  methods:
      "disable_reporting"     usebundle => disable_reporting;
    "action"             usebundle => file_line_present_in_xml_tag("${file}", "${tag}", "${line}");
      "reenable_reporting"    usebundle => enable_reporting,
                             if => "should_report";
    "class copy"         usebundle => _classes_copy("file_line_present_in_xml_tag_${canonified_file}", "${old_class_prefix}"),
                         if => "file_line_present_in_xml_tag_${canonified_file}_reached";
    "new result classes" usebundle => _classes_copy("${class_prefix}_action", "${class_prefix}"),
                         if => "${class_prefix}_action_reached";
    "report"   usebundle => _log("Insert line(s) ${line} into ${file}", "${old_class_prefix}", "${class_prefix}", @{args});
}
