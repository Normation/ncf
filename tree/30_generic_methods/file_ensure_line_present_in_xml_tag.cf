#####################################################################################
# Copyright 2014 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name File ensure line in XML section
# @description This is a bundle to ensure that a line is present in a tag in a specific location. The objective of this method is to handle XML-style files. Note that if the tag is not present in the file, it won't be added, and the edition will fail.
#
# @parameter file File name to edit
# @parameter tag Name of the XML tag under which lines should be added (not including the <> brackets)
# @parameter line Line to ensure is present inside the section
#
# @class_prefix file_ensure_line_present_in_xml_tag
# @class_parameter file

bundle agent file_ensure_line_present_in_xml_tag(file, tag, line)
{
  vars:
      "old_class_prefix" string => canonify("file_ensure_line_present_in_xml_tag_${file}");
      "promisers"          slist => { @{this.callers_promisers}, cf_null }, policy => "ifdefined";
      "class_prefix"      string => canonify(join("_", "promisers"));
      "args"              slist => { "${file}", "${tag}", "${line}" };

  classes:
      "opening_tag_exists" expression => regline("\s*<${tag}>\s*", "${file}");
      "closing_tag_exists" expression => regline("\s*</${tag}>\s*", "${file}");
      "tags_present"       expression => "opening_tag_exists.closing_tag_exists";

  files:
    tags_present::
      "${file}"
        edit_line     => ensure_line_in_xml_tag("${tag}", "${line}"),
        edit_defaults => ncf_empty_select("false"),
        classes       => classes_generic_two("${old_class_prefix}", "${class_prefix}");

  methods:
    !tags_present::
      "failure" usebundle => _classes_failure("${old_class_prefix}");
      "failure" usebundle => _classes_failure("${class_prefix}");

    any::
      "sanitize" usebundle => _classes_sanitize("${class_prefix}");
      "sanitize" usebundle => _classes_sanitize("${old_class_prefix}");
      "report"   usebundle => _log("Insert line(s) ${line} into ${file}", "${old_class_prefix}", "${class_prefix}", @{args});
}
