#####################################################################################
# Copyright 2013 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name File download from HTTP
# @description Download a file if it does not exist, using curl with a fallback on wget
# @documentation This method finds a HTTP command-line tool and downloads the given source
# into the destination.
# 
# It tries `curl` first, and `wget` as fallback.
#
# @parameter source      URL to download from
#Â @parameter destination File destination (absolute path on the target node)
# 
# @class_prefix file_from_http_server
# @class_parameter destination

bundle agent file_from_http_server(source, destination)
{

  vars:

    _stdlib_path_exists_curl::

      "action_command"            string => "${paths.path[curl]} -s -L -o ${destination} ${source}";

    !_stdlib_path_exists_curl._stdlib_path_exists_wget::

      "action_command"            string => "${paths.path[wget]} -O ${destination} ${source}";

    any::

      "canonified_destination"    string => canonify("${destination}");
      "canonified_action_command" string => canonify("${action_command}");

      "old_class_prefix"          string => "file_from_http_server_${canonified_destination}";
      "promisers"          slist => { @{this.callers_promisers}, cf_null }, policy => "ifdefined";
      "class_prefix"      string => canonify(join("_", "promisers"));
      "args"                       slist => { "${source}", "${destination}" };

  classes:

    "file_exists"    expression => fileexists("${destination}");

  methods:

    (_stdlib_path_exists_curl|_stdlib_path_exists_wget).!file_exists::

      "action"                    usebundle => command_execution("${action_command}");

      "class copy"                usebundle => _classes_copy("command_execution_${canonified_action_command}", "${old_class_prefix}");

      "new result classes"        usebundle => _classes_copy("${class_prefix}_action", "${class_prefix}");

      "report"                    usebundle => _log("Download ${source} into ${destination}", "${old_class_prefix}", "${class_prefix}", @{args}),
                                 ifvarclass => "(!has_promiser_stack.${old_class_prefix}_reached)|(has_promiser_stack.${class_prefix}_reached)";

    !_stdlib_path_exists_curl.!_stdlib_path_exists_wget.!file_exists::

      "force_failure_class"       usebundle => _classes_failure("${old_class_prefix}");
      "new result classes"        usebundle => _classes_failure("${class_prefix}");
      "report"                    usebundle => _log("Unable to download ${source}: neither wget or curl are installed", "${old_class_prefix}", "${class_prefix}", @{args});

    file_exists::

      "force_success_class"       usebundle => _classes_success("${old_class_prefix}"),
                                 ifvarclass => "!command_execution_${canonified_action_command}_repaired";
      "new result classes"        usebundle => _classes_success("${class_prefix}"),
                                 ifvarclass => "!${class_prefix}_action_repaired";
      "report"                    usebundle => _log("File ${destination} already downloaded", "${old_class_prefix}", "${class_prefix}", @{args}),
                                 ifvarclass => "(!has_promiser_stack.!command_execution_${canonified_action_command}_repaired)|(has_promiser_stack.!${class_prefix}_action_repaired)";

}
