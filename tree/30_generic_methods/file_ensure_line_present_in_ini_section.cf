#####################################################################################
# Copyright 2013 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name File ensure line in INI section
# @description This is a bundle to ensure that a line is present in a section in a specific location. The objective of this method is to handle INI-style files.
#
# @parameter file File name to edit
# @parameter section Name of the INI-style section under which lines should be added (not including the [] brackets)
# @parameter line Line to ensure is present inside the section
#
# @class_prefix file_ensure_line_present_in_ini_section
# @class_parameter file
#
# This bundle will define a class file_ensure_line_present_in_ini_section_${file}_{kept,repaired,not_ok,ok,not_ok,reached}

bundle agent file_ensure_line_present_in_ini_section(file, section, line)
{
  vars:
      "old_class_prefix"       string => canonify("file_ensure_line_present_in_ini_section_${file}");
      "class_prefix"           string => canonify(join("_", "this.callers_promisers"));
      "section_and_blank_line" string => "[${section}]
";

  classes:
      # Check if the section exist: if not, a class will be raised to add it with a blank line.
      "section_absent"  not => regline("^\[${section}\]$","${file}");

  files:
      # If the section is not present in the file, firstly it will be added
      # with a blank line in order to be catched for the lines to add after it.
      "${file}"
        create        => "true",
        edit_line     => ncf_insert_block("${section_and_blank_line}"),
        edit_defaults => no_backup,
        ifvarclass    => "section_absent",
        comment       => "Add section to file with a blank line";

      # Add the missing lines after the section.
      "${file}"
        create        => "true",
        edit_line     => ensure_line_in_ini_section("${section}", "${line}"),
        edit_defaults => no_backup,
        classes       => classes_generic_two("${old_class_prefix}", "${class_prefix}");

  methods:
      "report"             usebundle => _logger("Insert line(s) ${line} into ${file}", "${old_class_prefix}");
}
