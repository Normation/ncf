#####################################################################################
# Copyright 2013 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name File ensure block in section
# @rename file_block_present_in_section
# @deprecated Use [file_block_present_in_section](#file_block_present_in_section) instead.
# @description Ensure that a section contains exactly a text block
#
# @parameter file File name to edit (absolute path on the target node)
# @parameter section_start Start of the section
# @parameter section_end End of the section
# @parameter block Block representing the content of the section
#
# @class_prefix file_ensure_block_in_section
# @class_parameter file

bundle agent file_ensure_block_in_section(file, section_start, section_end, block)
{
  vars:
      "old_class_prefix" string => canonify("file_ensure_block_in_section_${file}");
      "promisers"          slist => { @{this.callers_promisers}, cf_null }, policy => "ifdefined";
      "class_prefix"      string => canonify(join("_", "promisers"));
      "args"              slist => { "${file}", "${section_start}", "${section_end}", "${block}" };
      "canonified_file"    string => canonify("${file}");


  classes:
      "should_report"    expression => "${report_data.should_report}";

  methods:
      "disable_reporting"     usebundle => disable_reporting;
    "action"             usebundle => file_block_present_in_section("${file}", "${section_start}", "${section_end}", "${block}");
      "reenable_reporting"    usebundle => enable_reporting,
                             if => "should_report";
    "class copy"         usebundle => _classes_copy("file_block_present_in_section_${canonified_file}", "${old_class_prefix}"),
                         if => "file_block_present_in_section_${canonified_file}_reached";
    "new result classes" usebundle => _classes_copy("${class_prefix}_action", "${class_prefix}"),
                         if => "${class_prefix}_action_reached";
    "report" usebundle => _log("Insert text block ${block} into ${file}", "${old_class_prefix}", "${class_prefix}", @{args});
}
