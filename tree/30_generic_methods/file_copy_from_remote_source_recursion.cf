#####################################################################################
# Copyright 2013 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name File copy from remote source recurse
# @description This is a bundle to ensure that a file or directory is copied from a remote source
# @documentation This method requires that the policy server is configured to accept
# copy of the source file or directory from the agents it will be applied to.
# 
# You have to write the full path of the file or directory on the policy server, for example:
# ```
# /home/myuser/mydirectory
# ```
# 
# If you are using Rudder, you can download a file from the shared files with:
# ```
# /var/rudder/configuration-repository/shared-files/PATH_TO_YOUR_DIRECTORY_OR_FILE
# ```
#
# @parameter source      Source file 
# @parameter destination Destination file
# @parameter recursion   Recursion depth to enforce for this path (0, 1, 2, ..., inf)
# 
# @class_prefix file_copy_from_remote_source
# @class_parameter destination

bundle agent file_copy_from_remote_source_recursion(source, destination, recursion)
{
  vars:
      "old_class_prefix" string => canonify("file_copy_from_remote_source_${destination}");
      "promisers"          slist => { @{this.callers_promisers}, cf_null }, policy => "ifdefined";
      "class_prefix"      string => canonify(join("_", "promisers"));
      "args"              slist => { "${source}", "${destination}", "${recursion}" };

  classes:
      # depth_search prevents from copying file/symlink
      # so we need to detect if we want to copy a folder or a file
      # If we check if it is a file, the class will always be true
      # event if was in fact a directory. Then, we test if it is a dir.
      "is_dir_copy"  expression => isdir("${destination}");
      # We won't be able to know if it is really a directory
      # or not before the first iteration
      "iteration_2"  expression => "iteration_1";
      "iteration_1"  expression => "any";

  files:

   !is_dir_copy::
      "${destination}"
        copy_from    => ncf_remote_cp_method("${source}", "${sys.policy_hub}", "digest"),
        classes      => classes_generic_two("${old_class_prefix}", "${class_prefix}");

   is_dir_copy::
      "${destination}"
        copy_from    => ncf_remote_cp_method("${source}", "${sys.policy_hub}", "digest"),
        depth_search => recurse("${recursion}"),
        classes      => classes_generic_two("${old_class_prefix}", "${class_prefix}");

  methods:
    # The reports should only be made after we know if this is a
    # directory (to apply recursion) or a file
    iteration_2.!is_dir_copy::
      "report"
        usebundle    => _log("Copying ${destination} from ${source}", "${old_class_prefix}", "${class_prefix}", @{args});

    iteration_2.is_dir_copy::
      "report"
        usebundle    => _log("Copying ${destination} from ${source}, recursion level ${recursion}", "${old_class_prefix}", "${class_prefix}", @{args});
}
