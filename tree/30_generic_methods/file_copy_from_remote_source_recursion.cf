#####################################################################################
# Copyright 2013 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name File copy from remote source recurse
# @rename file_from_remote_source_recursion
# @deprecated Use [file_from_remote_source_recursion](#file_from_remote_source_recursion) instead.
# @description Ensure that a file or directory is copied from a policy server
# @documentation This method requires that the policy server is configured to accept
# copy of the source file or directory from the agents it will be applied to.
# 
# You have to write the full path of the file or directory on the policy server, for example:
# ```
# /home/myuser/mydirectory
# ```
# 
# If you are using Rudder, you can download a file from the shared files with:
# ```
# /var/rudder/configuration-repository/shared-files/PATH_TO_YOUR_DIRECTORY_OR_FILE
# ```
#
# @parameter source      Source file (absolute path on the policy server)
# @parameter destination Destination file (absolute path on the target node)
# @parameter recursion   Recursion depth to enforce for this path (0, 1, 2, ..., inf)
# 
# @class_prefix file_copy_from_remote_source
# @class_parameter destination

bundle agent file_copy_from_remote_source_recursion(source, destination, recursion)
{
  vars:
      "old_class_prefix" string => canonify("file_copy_from_remote_source_${destination}");
      "promisers"          slist => { @{this.callers_promisers}, cf_null }, policy => "ifdefined";
      "class_prefix"      string => canonify(join("_", "promisers"));
      "args"              slist => { "${source}", "${destination}", "${recursion}" };
      "canonified_file"    string => canonify("${destination}");


  classes:
      "should_report"    expression => "${report_data.should_report}";

  methods:
      "disable_reporting"     usebundle => disable_reporting;
    "action"             usebundle => file_from_remote_source_recursion("${source}", "${destination}", "${recursion}");
      "reenable_reporting"    usebundle => enable_reporting,
                             if => "should_report";
    "class copy"         usebundle => _classes_copy("file_from_remote_source_${canonified_file}", "${old_class_prefix}"),
                         if => "file_from_remote_source_${canonified_file}_reached";
    "new result classes" usebundle => _classes_copy("${class_prefix}_action", "${class_prefix}"),
                         if => "${class_prefix}_action_reached";
    "report"             usebundle  => _log("Copying ${destination} from ${source}, recursion level ${recursion}", "${old_class_prefix}", "${class_prefix}", @{args});
}
