#####################################################################################
# Copyright 2014 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name Service ensure running with service path
# @description Ensure that a service is running using the appropriate method, specifying the path of the service in the ps output, or using Windows task manager
# @rename service_started_path
# @deprecated Use [service_started_path](#_service_started_path) instead.

# 
# @parameter name Service name (as recognized by systemd, init.d, Windows, etc...)
# @parameter path Service with its path, as in the output from 'ps'
#

# @parameter_rename service_name name
# @parameter_rename service_path path
# @class_prefix service_ensure_running
# @class_parameter name

bundle agent service_ensure_running_path(name, path)
{
  vars:

      "canonified_name"              string => canonify("${name}");
      "canonified_path"      string => canonify("${path}");

      "old_class_prefix"             string => "service_ensure_running_${canonified_name}";

      "args"                          slist => { "${name}", "${path}" };
      "report_param"                 string => join("_", args);
      "full_class_prefix"            string => canonify("service_ensure_running_${report_param}");
      "class_prefix"                 string => string_head("${full_class_prefix}", "1000");

      "full_inner_class_prefix"      string => canonify("service_started_${report_param}");
      "inner_class_prefix"           string => string_head("${full_inner_class_prefix}", "1000");


  classes:
      "should_report"    expression => "${report_data.should_report}";

  methods:
      "disable_reporting_${class_prefix}"
                           usebundle => disable_reporting;
      "action"             usebundle => service_started_path("${name}", "${path}");
      "reenable_reporting_${class_prefix}"
                           usebundle => enable_reporting,
                          ifvarclass => "should_report";
      "class copy"         usebundle => _classes_copy("${inner_class_prefix}", "${old_class_prefix}"),
                          ifvarclass => "${inner_class_prefix}_reached";

      "new result classes" usebundle => _classes_copy("${inner_class_prefix}", "${class_prefix}"),
                          ifvarclass => "${inner_class_prefix}_reached";
      "report"
                          usebundle  => _log_v3("Ensure that service ${name} is running", "${name}", "${old_class_prefix}", "${class_prefix}", @{args});


}
