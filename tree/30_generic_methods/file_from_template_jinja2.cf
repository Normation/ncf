#####################################################################################
# Copyright 2016 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name File from a jinja2 template
# @description This is a bundle to build a file from a jinja2 template
# @agent_requirements "capabilities": [ "dumpdatastate" ]
# @documentation See [file_from_template_type](#file_from_template_type) for general documentation about
# templates usage.
#
# This generic method will build a file from a jinja2 template
# using data (classes and variables) found in the execution context.
#
#
# #### Setup
#
# It requires to have the jinja2 python module installed on the node, it can usually be done in ncf with
# `package_present("python-jinja2", "", "", "")`.
#
# WARNING: If you are using a jinja2 version older than 2.7
#          trailing newlines will not be preserved in the destination file.
#
# #### Syntax
#
# Jinja2 is a powerful templating language, running in Python.
# The Jinja2 syntax reference documentation is [http://jinja.pocoo.org/docs/dev/templates/](http://jinja.pocoo.org/docs/dev/templates/)
# which will likely be useful, as Jinja2 is very rich and allows a lot more 
# that what is explained here.
#
# This section presents some simple cases that cover what can be done with mustache templating,
# and the way the agent data is provided to the templating engine.
#
# The main specificity of jinja2 templating is the use of two root containers:
#
# * `classes` to access currently defined classes
# * `vars` to access all currently defined variables
# 
# Note: You can add comments in the template, that will not be rendered in the output file with
# `{# ... #}`.
#
# ##### Classes
#
# To display content based on classes definition:
#
# ```jinja2
# {% if classes.my_class is defined  %}
#    display this if defined
# {% endif %}
# {% if not classes.my_class is defined %}
#    display this if not defined
# {% endif %}
# ```
#
# Note: You cannot use class expressions here.
#
# ##### Scalar variables
#
# Here is how to display a scalar variable value (integer, string, ...),
# if you have defined `variable_string("variable_prefix", "my_variable", "my_value")`:
#
# ```jinja2
# {{ vars.variable_prefix.my_variable }}
# ```
#
# ##### Iteration
#
# To iterate over a list, for example defined with:
#
# ```
# variable_iterator("variable_prefix", "iterator_name", "a,b,c", ",")
# ```
#
# Use the following file:
#
# ```jinja2
# {% for item in vars.variable_prefix.iterator_name %}
# {{ item }} is the current iterator_name value
# {% endfor %}
# ```
#
# Which will be expanded as:
#
# ```
# a is the current iterator_name value
# b is the current iterator_name value
# c is the current iterator_name value
# ```
#
# To iterate over a container defined by the following json file, loaded with 
# `variable_dict_from_file("variable_prefix", "dict_name", "path")`:
#
# ```json
# {
#    "hosts": [
#        "host1",
#        "host2"
#    ],
#    "files": [
#        {"name": "file1", "path": "/path1", "users": [ "user1", "user11" ] },
#        {"name": "file2", "path": "/path2", "users": [ "user2" ] }
#    ],
#    "properties": {
#        "prop1": "value1",
#        "prop2": "value2"
#    }
# }
# ```
#
# Use the following template:
#
# ```mustache
# {% for item in vars.variable_prefix.dict_name.hosts %}
# {{ item }} is the current hosts value
# {% endfor %}
#
# # will display the name and path of the current file
# {% for file in vars.variable_prefix.dict_name.files %}
# {{ file.name }}: {{ file.path }}
# {% endfor %}
#
# # will display the users list of each file
# {% for file in vars.variable_prefix.dict_name.files %}
# {{ file.name }}: {{ file.users|join(' ') }}
# {% endfor %}
#
#
# # will display the current properties key/value pair
# {% for key, value in vars.variable_prefix.dict_name.properties %}
# {{ key }} -> {{ value }}
# {% endfor %}
#
# ```
#
# Which will be expanded as:
#
# ```
# host1 is the current hosts value
# host2 is the current hosts value
#
# # will display the name and path of the current file
# file1: /path1
# file2: /path2
#
# # will display the users list of each file
# file1: user1 user11
# file2: user2
#
# # will display the current properties key/value pair
# prop1 -> value1
# prop2 -> value2
# ```
#
# @parameter source_template Source file containing a template to be expanded
# @parameter destination     Destination file
#
# @class_prefix file_from_template
# @class_parameter destination

bundle agent file_from_template_jinja2(source_template, destination)
{

  vars:
      "promisers"         slist  => { @{this.callers_promisers}, cf_null }, policy => "ifdefined";
      "old_class_prefix"  string => canonify("file_from_template_${destination}");
      "class_prefix"      string => canonify(join("_", "promisers"));
      "args"              slist  => { "${source_template}", "${destination}" };

      "jinja2_script"     string => "${sys.workdir}/modules/templates/jinja2-templating.py";
      "datastate_file"    string => "${source_template}.datastate.${this.promiser_pid}.json";
      "destination_canon" string => canonify("${destination}");
      "destination_tmp"   string => "${source_template}.${this.promiser_pid}.new";
    state_dumped::
      # Here we put the output into the errors variable. As the stdout is sent to a file, the output is only stderr,
      # and can be used to check for errors.
      "errors" string => execresult("/usr/bin/python \"${jinja2_script}\" --strict \"${source_template}\" \"${datastate_file}\" > \"${destination_tmp}\"", "useshell");

  classes:
      # This class may not be set when we cannot write the datastate file.
      "state_dumped" expression => dumpdatastate("${datastate_file}");
      # If the stderr of the python templating command was empty, we consider that the templating succeeeded.
      "templating_ok" expression => strcmp("${errors}", "");

      "pass3" expression => "pass2";
      "pass2" expression => "pass1";
      "pass1" expression => "any";

  methods:
    pass2.templating_ok::
      # Use a file copy to avoid any file size limitations of CFEngine variables.
      "copy file"    usebundle => file_copy_from_local_source("${destination_tmp}", "${destination}");
      "copy classes" usebundle => _classes_copy("file_copy_from_local_source_${destination_canon}", "${old_class_prefix}");

    pass3.state_dumped::
      "clean data file"     usebundle => file_remove("${datastate_file}");
      "clean template file" usebundle => file_remove("${destination_tmp}");

    pass3::
      "failure" usebundle  => _classes_failure("${old_class_prefix}"),
                ifvarclass => "!${old_class_prefix}_reached";
      "failure" usebundle  => _classes_failure("${class_prefix}"),
                ifvarclass => "!${old_class_prefix}_reached";

      "new result classes"  usebundle  => _classes_copy("${old_class_prefix}", "${class_prefix}"),
                            ifvarclass => "${old_class_prefix}_reached";
      "report"              usebundle  => _log("Build file ${destination} from template ${source_template}", "${old_class_prefix}", "${class_prefix}", @{args});

   reports:
     # Display templating errors in case of failure.
     "Templating error: ${errors}" ifvarclass => "state_dumped.!templating_ok";

}

