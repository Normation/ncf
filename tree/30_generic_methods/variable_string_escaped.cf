#####################################################################################
# Copyright 2019 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name Variable string escaped
# @description Define a variable from another string variable and escape regular expression characters in it.
# @documentation To use the generated variable, you must use the form `${<variable_name>_escaped}` where <variable_name> is the composed complete name
# of the variable you want to escape.
#
# Please note that the variable you want to escape must be defined before this method evaluation.
#
# #### Example:
#
# With a variable defined by the generic method `variable_string`, named `my_prefix.my_variable` and valued to:
#
# ````
#  something like [] that
# ````
#
# Passing `my_prefix.my_variable` as `variable_name` parameter to this method will result in a
# variable named `my_prefix.my_variable_escaped` and valued to:
#
# ````
# something\ like\ \[\]\ that
# ````
#
# @parameter variable_name   The variable to define, the full name will be variable_prefix.variable_name
# @parameter_constraint variable_name "regex" : "^[A-Za-z0-9_\.]+$"
# @class_prefix variable_string_escaped
# @class_parameter variable_name

bundle agent variable_string_escaped(variable_name)
{
  vars:
      "old_class_prefix"  string => canonify("variable_string_escaped_${variable_name}");
      "args"               slist => { "${variable_name}" };
      "report_param"      string => join("_", args);
      "full_class_prefix" string => canonify("variable_string_escaped_${report_param}");
      "class_prefix"      string => string_head("${full_class_prefix}", "1000");

      # define the variable within the same namespace
      "${variable_name}_escaped" string => escape("${${variable_name}}");

  classes:
     "variable_defined" expression => isvariable("${variable_name}_escaped");

  methods:
    !variable_defined::
      "error"    usebundle => _classes_failure("${old_class_prefix}");
      "error"    usebundle => _classes_failure("${class_prefix}");

    variable_defined::
      "success"  usebundle => _classes_success("${old_class_prefix}");
      "success"  usebundle => _classes_success("${class_prefix}");

    any::
      "report"
        usebundle  => _log_v3("Set the string ${variable_name}_escaped to the escaped value of ${variable_name}", "${variable_name}", "${old_class_prefix}", "${class_prefix}", @{args});
}

