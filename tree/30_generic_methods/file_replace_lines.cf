#####################################################################################
# Copyright 2013 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name File replace lines
# @description This is a bundle to ensure that a line in a file is replaced by another one
# @documentation You can replace lines in a files, based on regular expression and captured pattern
#
# #### Syntax
#
# The content to match in the file is a PCRE regular expression, unanchored
# that you can replace with the content of replacement.
#
# Content can be captured in regular expression, and be reused with the notation `${match.1}` (for first matched
# content), `${match.2}` for second, etc, and the special captured group `${match.0}` for the whole text.
#
# #### Example
#
# Here is an example to remove enclosing specific tags
#
# ```
# file_replace_lines("/PATH_TO_MY_FILE/file", "<my>(.*)<pattern>", "my ${match.1} pattern")
# ```
#
# @parameter file File name to edit
# @parameter line Line to match in the file
# @parameter replacement Line to add in the file as a replacement
#
# @class_prefix file_replace_lines
# @class_parameter file

bundle agent file_replace_lines(file, line, replacement)
{
  vars:
      "old_class_prefix" string => canonify("file_replace_lines_${file}");
      "promisers"          slist => { @{this.callers_promisers}, cf_null }, policy => "ifdefined";
      "class_prefix"      string => canonify(join("_", "promisers"));
      "args"              slist => { "${file}", "${line}", "${replacement}" };

  files:
      "${file}"
        create        => "false",
        edit_line     => regex_replace("${line}", "${replacement}"),
        edit_defaults => ncf_empty_select("false"),
        classes       => classes_generic_two("${old_class_prefix}", "${class_prefix}");

  methods:
      "sanitize" usebundle => _classes_sanitize("${class_prefix}");
      "sanitize" usebundle => _classes_sanitize("${old_class_prefix}");
      "report"   usebundle => _log("Replace line ${lines} with ${replacement} into ${file}", "${old_class_prefix}", "${class_prefix}", @{args});
}
