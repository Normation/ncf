#####################################################################################
# Copyright 2013-5 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name Log default
# @description Standard default logging output
#
# @parameter message              The common part of the message to display
# @parameter old_class_prefix     The prefix of the class for different states (0.x version)
# @parameter origin_class_prefix  The prefix of the class for different states (1.x version)
# @parameter args                 The arguments used to call the generic method (slist)
#
# @class_prefix _logger_default
# @class_parameter old_class_prefix
# The three states are kept, repaired and not_ok
# (as defined in the classes_generic of the cfengine_stdlib)

bundle agent _log_default(message, old_class_prefix, origin_class_prefix, args)
{
  vars:
    "canonified_prefix" string => canonify("${old_class_prefix}");

    "promiser_count" int => length("this.callers_promisers");

    # head(length-2) -> remove logger call stack (_log + _log_default)
    "nologger_len" string => eval("${promiser_count}-2", "math", "infix");
    "promisers_list_nologger" slist => sublist("this.callers_promisers", "head", "${nologger_len}");

    "promisers" string => join("/", "promisers_list_nologger");

    "arg_list" string => join(",", "args");

  reports:
    debug.has_promiser_stack::
      "${configuration.debug} Promise called ${promisers} with ${arg_list}"; # full debug information

    debug.!has_promiser_stack::
      "${configuration.debug} Promise kept, not doing anything: ${message}"
        ifvarclass => "${canonified_prefix}_kept.!${canonified_prefix}_repaired.!${canonified_prefix}_not_ok";

    debug.has_promiser_stack::
      "${configuration.debug} Promise kept, not doing anything: ${message}"
        ifvarclass => "${origin_class_prefix}_kept.!${origin_class_prefix}_repaired.!${origin_class_prefix}_not_ok";

    (debug|info).!has_promiser_stack::
      "${configuration.info} Promise repaired, made a change: ${message}"
        ifvarclass => "${canonified_prefix}_repaired.!${canonified_prefix}_not_ok";

    (debug|info).has_promiser_stack::
      "${configuration.info} Promise repaired, made a change: ${message}"
        ifvarclass => "${origin_class_prefix}_repaired.!${origin_class_prefix}_not_ok";

    !has_promiser_stack:: # We always want to log errors
      "${configuration.error} Promise could not be repaired, error encountered: ${message}"
        ifvarclass => "${canonified_prefix}_not_ok";

    has_promiser_stack:: # We always want to log errors
       "${configuration.error} Promise could not be repaired, error encountered: ${message}"
        ifvarclass => "${origin_class_prefix}_not_ok";
}
