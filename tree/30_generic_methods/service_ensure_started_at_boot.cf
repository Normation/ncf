#####################################################################################
# Copyright 2014 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name Service ensure started at boot
# @description Force a service to be started at boot
# @rename service_enabled
# @deprecated Use [service_enabled](#_service_enabled) instead.
#
# @parameter name Service name (as recognized by systemd, init.d, Windows, SRC, SMF, etc...)
#
#
# @parameter_rename service_name name
# @class_prefix service_ensure_started_at_boot
# @class_parameter name

bundle agent service_ensure_started_at_boot(name)
{
  vars:



    any::
      "canonified_name" string => canonify("${name}");

      "old_class_prefix"        string => "service_ensure_started_at_boot_${canonified_name}";

      "full_class_prefix"       string => canonify("service_ensure_started_at_boot_${name}");
      "class_prefix"            string => string_head("${full_class_prefix}", "1000");

      "full_inner_class_prefix" string => canonify("service_enabled_${name}");
      "inner_class_prefix"      string => string_head("${full_inner_class_prefix}", "1000");

      "args"                     slist => { "${name}" };



  classes:
      "should_report"    expression => "${report_data.should_report}";

  methods:
      "disable_reporting_${class_prefix}"
                           usebundle => disable_reporting;
      "action"             usebundle => service_enabled("${name}");
      "reenable_reporting_${class_prefix}"
                           usebundle => enable_reporting,
                          ifvarclass => "should_report";
      "class copy"         usebundle => _classes_copy("service_enabled_${canonified_name}", "${old_class_prefix}"),
                          ifvarclass => "service_enabled_${canonified_name}_reached";
      "new result classes" usebundle => _classes_copy("${inner_class_prefix}", "${class_prefix}"),
                          ifvarclass => "${inner_class_prefix}_reached";
      "report"             usebundle => _log_v3("Ensure service ${name} is started at boot", "${name}", "${old_class_prefix}", "${class_prefix}", @{args});

}
