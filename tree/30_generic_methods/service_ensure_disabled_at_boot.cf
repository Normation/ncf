#####################################################################################
# Copyright 2017 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name Service ensure disabled at boot
# @rename service_disabled_at_boot
# @deprecated Use [service_disabled_at_boot](#service_disabled_at_boot) instead.
# @description Force a service not to be enabled at boot
#
# @parameter service_name Service name (as recognized by systemd, init.d, etc...)
#
# @class_prefix service_ensure_disabled_at_boot
# @class_parameter service_name
# This bundle will define a class service_ensure_disabled_at_boot_${canonified_service_name}_{kept,repaired,not_ok,ok,reached}

bundle agent service_ensure_disabled_at_boot(service_name)
{
  vars:

    any::

      "canonified_service_name" string => canonify("${service_name}");

      "old_class_prefix"        string => "service_ensure_disabled_at_boot_${canonified_service_name}";
      "promisers"          slist => { @{this.callers_promisers}, cf_null }, policy => "ifdefined";
      "class_prefix"      string => canonify(join("_", "promisers"));
      "args"                     slist => { "${service_name}" };

  methods:
    "action"             usebundle => service_disabled("${service_name}");
    "class copy"         usebundle => _classes_copy("service_disabled_${canonified_service_name}", "${old_class_prefix}"),
                         ifvarclass => "service_disabled_${canonified_service_name}_reached";
    "new result classes" usebundle => _classes_copy("${class_prefix}_action", "${class_prefix}"),
                         ifvarclass => "${class_prefix}_action_reached";
    "report"
        usebundle => _log("Ensure service ${service_name} is disabled at boot", "${old_class_prefix}", "${class_prefix}", @{args});:q

}
