#####################################################################################
# Copyright 2017 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name User locked
# @description Ensure the user is locked. User must already exist.
# @documentation This method does not create the user. Note that locked accounts will
#   be marked with "!" in /etc/shadow, which is equivalent to "*".
#   To unlock a user, apply a user_password method.
#
# @parameter login User's login
# 
# @class_prefix user_locked
# @class_parameter login

bundle agent user_locked(login)
{
  vars:
      "old_class_prefix"  string => canonify("user_locked_${login}");
      "promisers"          slist => { @{this.callers_promisers}, cf_null }, policy => "ifdefined";
      "class_prefix"      string => canonify(join("_", "promisers"));
      "args"               slist => { "${login}" };

  classes:
      "user_exists" expression => userexists("${login}");
      "args_defined"    expression => "user_exists";

  users:
      "${login}"  policy        => "locked",
                  classes       => classes_generic_two("${old_class_prefix}", "${class_prefix}"),
                  if    => "args_defined";

  methods:
    !args_defined::
        "error" usebundle => _classes_failure("${old_class_prefix}");
        "error" usebundle => _classes_failure("${class_prefix}");

        "report_error"
          usebundle => _log("User ${login} does not exist. Locking user ${login}", "${old_class_prefix}", "${class_prefix}", @{args});

    args_defined::
      "report_success"
        usebundle => _log("User ${login} locking status", "${old_class_prefix}", "${class_prefix}", @{args}),
          if => "(!has_promiser_stack.${old_class_prefix}_reached)|(has_promiser_stack.${class_prefix}_reached)";

}

