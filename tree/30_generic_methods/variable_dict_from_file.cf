#####################################################################################
# Copyright 2015 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name Variable dict from file
# @description Define a variable that contains key,value pairs (a dictionnary) from a JSON file
#
# @parameter variable_prefix The prefix of the variable name, use ${class_prefix} for a local variable and a static name for a global variable
# @parameter variable_name   The variable to define, the full name will be variable_prefix.variable_name
# @parameter file_name       The file name with JSON content
# 
# @class_prefix variable_dict_from_file
# @class_parameter variable_name
# 
# This bundle will define a class variable_dict_from_file_${variable_name}_{kept,repaired,not_ok,ok,reached}
#
# To use the generated variable, you must use the form ${variable_prefix.variable_name[key]} with each name replaced with the parameters of this method.
# 
# To create a local variable, use ${class_prefix} as a prefix so that it is garanteed to be unique to this technique instance.
# this variable is automatically defined in your technique and is available if you use Rudder agent >= 4.0 or cfengine >= 3.8
# to create a global variable, use a static name that you can reuse in other techniques.
# Be careful that using a global variable can lead to unpredictable content in case of multiple definition, which is implicitly the case when a technique has more than one instance (directive). 
# Please note that only global variables are available within templates.

bundle agent variable_dict_from_file(variable_prefix, variable_name, file_name)
{
  vars:
      "old_class_prefix"  string => canonify("variable_dict_from_file_${variable_name}");
      "class_prefix"      string => canonify(join("_", "this.callers_promisers"));
      "args"               slist => { "${variable_prefix}", "${variable_name}", "${file_name}" };

      # define the variable within the class_prefix namespace
      "${variable_prefix}.${variable_name}"  data => readjson("${file_name}", "100000000");

  classes:
     "variable_defined" expression => isvariable("${variable_prefix}.${variable_name}");

  methods:
    !variable_defined::
      "error"    usebundle => _classes_failure("${old_class_prefix}");
      "error"    usebundle => _classes_failure("${class_prefix}");

    variable_defined::
      "success"  usebundle => _classes_success("${old_class_prefix}");
      "success"  usebundle => _classes_success("${class_prefix}");

    any::
      "report"
        usebundle  => _logger("Set the dict ${variable_prefix}.${variable_name} to the content of ${file_name}", "${old_class_prefix}", "${class_prefix}", @{args});
  reports:
    "${file_name} -> ${${variable_prefix}.${variable_name}}";
}
