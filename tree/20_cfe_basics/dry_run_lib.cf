#####################################################################################
# Copyright 2016 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# The dry-run lib is based on classes, so you need to control the environment of promises to
# set the dry-run mode.
# To enable the dry-run mode after some point in the execution flow, call set_dry_run_mode("true")
# and to reset the dry-run mode to the default (which is disabled), call
# set_dry_run_mode("false"). This is best used within a methods section,
# because you can control execution flow easily.
#
# A real example should look like:
#
# ```
# methods:
#   "enable dry-run"  usebundle => set_dry_run_mode("true");
#   "dry-run part"    usebundle => package_present("htop");
#   "disable dry-run" usebundle => set_dry_run_mode("false");
# ```
#
# When trying to enable dry-run on systems that do not support the dry-run lib,
# the agent will abort execution to avoid making unwanted changes.
#
# There are alternate ways to control the dry-run mode, but they are less safe
# and should be used with caution.
#  - set the global_dry_run class (this one is never set by ncf)
#  - set a <promise_type>_dry_run class to make only this promise type to be dry-runned
# If you use one of those and not call the set_dry_run_mode bundle,
# the dry-run mode will be ignore on incompatible systems and will lead to enforce
# policies supposed to only be in dry-run mode.
#
# WARNING:
# WARNING: Be carefull to have a different promiser content for each call to this method!
# WARNING:
# WARNING: The bodies defined here are used when no action body is specified in a promise.
# WARNING: All ncf action bodies check the two global dry-run classes and prevent any modification
# WARNING: when one of them if defined. This also means that:
# WARNING:
# WARNING: * You need to check for them in all of your custom bodies
# WARNING: * promise type specific dry-run is NOT considered by action bodies, and will be overriden
# WARNING:   when using any action body.
# WARNING:
#
# @parameter mode   The dry-run mode, "true" to enable dry-run-mode and "false" to disable it
# @agent_requirements "capabilities": [ "bodydefault" ] || "agent_version" >= 3.9
# 

bundle agent set_dry_run_mode(mode)
{
  vars:
    # this is a way to remove the class without side effect
    pass2.unset_mode::
      "ignored" string => "", classes => if_ok_cancel("dry_run"); 

  classes:
      # double negation, so that the default is dry_run (in case of error)
      "unset_mode" expression => strcmp("${mode}", "false");
      "pass2" expression => "pass1";
      "pass1" expression => "any";

    pass2.!unset_mode::
      "dry_run" expression => "any", scope => "namespace";
  
  reports:
    pass2.debug.unset_mode::
      "${configuration.debug} Disabling dry-run mode";
    pass2.debug.!unset_mode::
      "${configuration.debug} Enabling dry-run mode";
}

###############################################################################
# Body that can enable dry-run with a promise type granularity.
# We dont put some promise type here because they should not be dry runned.
# They are:
#  - meta
#  - vars
#  - defaults
#  - classes
#  - methods
#  - reports
#  - ... and all promise types that are not for the agent
###############################################################################

body file control
{
   namespace => "bodydefault"; 
}

# Actions that can be dry runned
body action users_action
{
  user_dry_run|dry_run|global_dry_run::
    action_policy => "warn";
  !(user_dry_run|dry_run|global_dry_run)::
    action_policy => "fix";
}

body action files_action
{
  files_dry_run|dry_run|global_dry_run::
    action_policy => "warn";
  !(files_dry_run|dry_run|global_dry_run)::
    action_policy => "fix";
}

body action packages_action
{
  packages_dry_run|dry_run|global_dry_run::
    action_policy => "warn";
  !(packages_dry_run|dry_run|global_dry_run)::
    action_policy => "fix";
}

body action guest_environments_action
{
  guest_environments_dry_run|dry_run|global_dry_run::
    action_policy => "warn";
  !(guest_environments_dry_run|dry_run|global_dry_run)::
    action_policy => "fix";
}

body action processes_action
{
  processes_dry_run|dry_run|global_dry_run::
    action_policy => "warn";
  !(processes_dry_run|dry_run|global_dry_run)::
    action_policy => "fix";
}

body action services_action
{
  services_dry_run|dry_run|global_dry_run::
    action_policy => "warn";
  !(services_dry_run|dry_run|global_dry_run)::
    action_policy => "fix";
}

body action commands_action
{
  commands_dry_run|dry_run|global_dry_run::
    action_policy => "warn";
  !(commands_dry_run|dry_run|global_dry_run)::
    action_policy => "fix";
}

body action storage_action
{
  storage_dry_run|dry_run|global_dry_run::
    action_policy => "warn";
  !(storage_dry_run|dry_run|global_dry_run)::
    action_policy => "fix";
}

body action databases_action
{
  databases_dry_run|dry_run|global_dry_run::
    action_policy => "warn";
  !(databases_dry_run|dry_run|global_dry_run)::
    action_policy => "fix";
}

body file control
{
    namespace => "default"; 
}

