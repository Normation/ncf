#####################################################################################
# Copyright 2015 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name Log for Rudder
# @description Logging output for Rudder reports
#
# @parameter message              The common part of the message to display
# @parameter class_parameter      The class_parameter for reporting (4.3+ version)
# @parameter old_class_prefix     The prefix of the class for different states (<4.3 version)
# @parameter class_prefix         The prefix of the class for different states (4.3+ version)
# @parameter args                 The arguments used to call the generic method (slist)
#
# @class_prefix    logger_rudder
# @class_parameter old_class_prefix

bundle agent log_rudder(message, class_parameter, old_class_prefix, class_prefix, args)
{

  vars:

      "c_old_class_prefix"     string => canonify("${old_class_prefix}");
      # When ${class_prefix} itself contains ${class_prefix}, it uses the previous value when calling
      # _rudder_common_reports_generic. We reset it at the beginning of the bundle execution
      # to be able to test if class_prefix is actually defined.
      "c_class_prefix"         string => "";
      "c_class_prefix"         string => canonify("${class_prefix}");

      "class_prefix_length"       int => string_length("${class_prefix}");

      "component_key"          string => "${class_parameter}";

  defaults:
      # if class_parameter is not set, then use the component_key from report_data
      "component_key"          string => "${report_data.component_key}", if_match_regex => "";

  classes:
      # Use the full class prefix if:
      # - it is defined
      # - its length is smaller than 1000 character (classes are limited to 1023 characters, so if the prefix
      #   is too long, then classes are not defined and it can't be used
      # Note that if we don't use the full class_prefix, we fallback to the previous use case, where classes collision happen
      "class_prefix_null"    expression => strcmp("cf_null", "${class_prefix}");
      "class_prefix_empty"   expression => strcmp("", "${class_prefix}");
      "class_prefix_unexpanded" expression => strcmp("", "${c_class_prefix}");
      "class_prefix_defined" expression => "!class_prefix_null.!class_prefix_empty.!class_prefix_unexpanded";

      "class_prefix_size_ok" expression => isgreaterthan("1000", "${class_prefix_length}");
      "use_class_prefix"     expression => "class_prefix_defined.class_prefix_size_ok";

  methods:
    !use_class_prefix::
      "report" usebundle => _rudder_common_reports_generic("${report_data.technique_name}", "${c_old_class_prefix}", "${report_data.identifier}", "${report_data.component_name}", "${component_key}", "${message}"),
        classes    => classes_generic("logger_rudder_${c_old_class_prefix}");

    use_class_prefix::
      "report" usebundle => _rudder_common_reports_generic("${report_data.technique_name}", "${c_class_prefix}", "${report_data.identifier}", "${report_data.component_name}", "${component_key}", "${message}"),
        classes    => classes_generic("logger_rudder_${c_class_prefix}");

  reports:
    info.!class_prefix_size_ok::
      # Since the class_prefix is too long, i'm not outputing it (it would fill several lines of text with no added value)
      "${configuration.info}: Class prefix is too long - fallbacking to old_class_prefix ${old_class_prefix} for reporting";
}

# bundle backported from rudder (prefixed with _ to avoid conflicts)
# all this whould be removed when we put this file back to rudder
# 
#
# Create and send a report to the server
# This bundle takes 7 parameters :
# technique_name : the name of the technique, human readable
# class_prefix   : the class_prefix (to ensure reports)
# status         : the status of the Component, among the following values
#    result_success
#    result_error
#    result_repaired
#    log_repaired (for logging only)
#    log_warn     (for logging only)
#    log_info     (for logging only)
#    log_debug    (for logging only)
#    log_trace    (for logging only)
# identifier     : the identifier of the current Rule and Directive
# component_name : the name of the component within the Technique
# component_key  : the value of the component reference variable (or None if undefined)
# message        : An explanation message understandable by a human
# Warning, any modification here should also be ported to _rudder_common_report_hooks
bundle agent _rudder_common_report(technique_name, class_prefix, status, identifier, component_name, component_key, message)
{
  # We cannot allow for empty component_name
  defaults:
      "component_name" string => "None", if_match_regex => "";

  classes:
    changes_only::
      "send_reports" or => {
                            strcmp("${status}", "result_error") ,
                            strcmp("${status}", "result_repaired") ,
                            strcmp("${status}", "log_warn") ,
                            strcmp("${status}", "log_repaired") ,
                            strcmp("${status}", "audit_noncompliant") ,
                            strcmp("${status}", "audit_error") ,
                           };

  methods:
    # If we need to send a report, make sure we have sent the "StartRun" message first
    send_reports.!start_run_message_sent::
      "Send start message"
        usebundle => _startExecution("${identifier}"),
        action    => immediate_ignore_dry_run;

  reports:
    !changes_only|send_reports::
      "@@${technique_name}@@${status}@@${identifier}@@${component_name}@@${component_key}@@${g.execRun}##${g.uuid}@#${message}"
        comment => "Sending report from class_prefix ${class_prefix}";
}

#
# Automatically create reports based on existing classes starting by
# class_prefix (as defined by the body classes rudder_common_classes)
# Takes 6 parameters
# technique_name : the name of the technique, human readable
# class_prefix   : the prefix of a set of classes to reporting on (suffixes with "kept", "repaired" or "error")
# identifier     : the identifier of the current Rule and Directive
# component_name : the name of the component within the Technique
# component_key  : the value of the component reference variable (None if it does not exists)
# message_prefix : The begining of an explanation message understandable by a human
#
# Warning, any modification here should also be ported to _rudder_common_generic_hooks
bundle agent _rudder_common_reports_generic(technique_name, class_prefix, identifier, component_name, component_key, message_prefix)
{
  # We cannot allow for empty component_name
  defaults:
      "component_name" string => "None", if_match_regex => "";

  classes:
      "report" expression => "${report_data.should_report}";

  methods:

      # This case should NEVER happen. If it ever happens, it is a bug in CFEngine or ncf that lead to changing something in dry-run mode.
      # Hence, as we are facing a severe bug and we want to avoid changing more things, we define an abort class after displaying an error message .
      "abort" usebundle => _abort("repaired_during_dryrun", "Repaired previous component while in dry-run mode, this is a bug. Aborting immediately."),
                action  => immediate_ignore_dry_run,
             ifvarclass => "(dry_run|global_dry_run).${class_prefix}_repaired";

    !report::
      "na"
        usebundle  => _rudder_common_report("${technique_name}", "${class_prefix}", "log_info", "${identifier}", "${component_name}", "${component_key}", "${message_prefix} was not applicable"),
        ifvarclass => "${class_prefix}_noop.!${class_prefix}_kept.!${class_prefix}_repaired.!${class_prefix}_error";

      "success"
        usebundle  => _rudder_common_report("${technique_name}", "${class_prefix}", "log_info", "${identifier}", "${component_name}", "${component_key}", "${message_prefix} was correct"),
        ifvarclass => "${class_prefix}_kept.!${class_prefix}_repaired.!${class_prefix}_error";

      "repaired"
        usebundle  => _rudder_common_report("${technique_name}", "${class_prefix}", "log_repaired", "${identifier}", "${component_name}", "${component_key}", "${message_prefix} was repaired"),
        ifvarclass => "${class_prefix}_repaired.!${class_prefix}_error";

      "error"
        usebundle  => _rudder_common_report("${technique_name}", "${class_prefix}", "log_warn", "${identifier}", "${component_name}", "${component_key}", "${message_prefix} could not be repaired"),
        ifvarclass => "${class_prefix}_error";


    report.!(dry_run|global_dry_run)::
      "na"
        usebundle  => _rudder_common_report("${technique_name}", "${class_prefix}", "result_na", "${identifier}", "${component_name}", "${component_key}", "${message_prefix} was not applicable"),
        ifvarclass => "${class_prefix}_noop.!${class_prefix}_kept.!${class_prefix}_repaired.!${class_prefix}_error";

      "success"
        usebundle  => _rudder_common_report("${technique_name}", "${class_prefix}", "result_success", "${identifier}", "${component_name}", "${component_key}", "${message_prefix} was correct"),
        ifvarclass => "${class_prefix}_kept.!${class_prefix}_repaired.!${class_prefix}_error";

      "repaired"
        usebundle  => _rudder_common_report("${technique_name}", "${class_prefix}", "result_repaired", "${identifier}", "${component_name}", "${component_key}", "${message_prefix} was repaired"),
        ifvarclass => "${class_prefix}_repaired.!${class_prefix}_error";

      "error"
        usebundle  => _rudder_common_report("${technique_name}", "${class_prefix}", "result_error", "${identifier}", "${component_name}", "${component_key}", "${message_prefix} could not be repaired"),
        ifvarclass => "${class_prefix}_error";

    report.(dry_run|global_dry_run)::
      "na"
        usebundle  => _rudder_common_report("${technique_name}", "${class_prefix}", "audit_na", "${identifier}", "${component_name}", "${component_key}", "${message_prefix} was not applicable"),
        ifvarclass => "${class_prefix}_noop.!${class_prefix}_kept.!${class_prefix}_repaired.!${class_prefix}_error";

      "success"
        usebundle  => _rudder_common_report("${technique_name}", "${class_prefix}", "audit_compliant", "${identifier}", "${component_name}", "${component_key}", "${message_prefix} was correct"),
        ifvarclass => "${class_prefix}_kept.!${class_prefix}_repaired.!${class_prefix}_error";

      "noncompliant"
        usebundle  => _rudder_common_report("${technique_name}", "${class_prefix}", "audit_noncompliant", "${identifier}", "${component_name}", "${component_key}", "${message_prefix} was not correct"),
        ifvarclass => "${class_prefix}_error.!${class_prefix}_repaired";

      "unexpected error"
        usebundle  => _rudder_common_report("${technique_name}", "${class_prefix}", "audit_error", "${identifier}", "${component_name}", "${component_key}", "${message_prefix} was repaired but should have been run in dry-run mode"),
        ifvarclass => "${class_prefix}_repaired";
}


######################################################################
##### Reporting for the pre/post hooks
##### These methods should not be used for normal generic method usage
##### because they do not respect the stop on repair for audit mode
######################################################################

#
# Automatically create reports based on existing classes starting by
# class_prefix (as defined by the body classes rudder_common_classes)
# Difference with _rudder_common_reports_generic : it remaps _repaired
# to _audit_compliant in audit mode
# Takes 7 parameters
# technique_name : the name of the technique, human readable
# class_prefix   : the prefix of a set of classes to reporting on (suffixes with "kept", "repaired" or "error")
# identifier     : the identifier of the current Rule and Directive
# component_name : the name of the component within the Technique
# component_key  : the value of the component reference variable (None if it does not exists)
# message_prefix : The begining of an explanation message understandable by a human
# enforce_mode   : Define the mode of reporting: enforce or audit
#
bundle agent _rudder_common_reports_generic_hooks(technique_name, class_prefix, identifier, component_name, component_key, message_prefix, enforce_mode)
{
  # We cannot allow for empty component_name
  defaults:
      "component_name" string => "None", if_match_regex => "";

  classes:
      "is_enforce" expression => strcmp("${enforce_mode}", "enforce");

  methods:
    is_enforce::
      "na"
        usebundle  => _rudder_common_report("${technique_name}", "${class_prefix}", "result_na", "${identifier}", "${component_name}", "${component_key}", "${message_prefix} was not applicable"),
        ifvarclass => "${class_prefix}_noop.!${class_prefix}_kept.!${class_prefix}_repaired.!${class_prefix}_error";

      "success"
        usebundle  => _rudder_common_report("${technique_name}", "${class_prefix}", "result_success", "${identifier}", "${component_name}", "${component_key}", "${message_prefix} was correct"),
        ifvarclass => "${class_prefix}_kept.!${class_prefix}_repaired.!${class_prefix}_error";

      "repaired"
        usebundle  => _rudder_common_report("${technique_name}", "${class_prefix}", "result_repaired", "${identifier}", "${component_name}", "${component_key}", "${message_prefix} was repaired"),
        ifvarclass => "${class_prefix}_repaired.!${class_prefix}_error";

      "error"
        usebundle  => _rudder_common_report("${technique_name}", "${class_prefix}", "result_error", "${identifier}", "${component_name}", "${component_key}", "${message_prefix} could not be repaired"),
        ifvarclass => "${class_prefix}_error";

    !is_enforce::
      "na"
        usebundle  => _rudder_common_report("${technique_name}", "${class_prefix}", "audit_na", "${identifier}", "${component_name}", "${component_key}", "${message_prefix} was not applicable"),
        ifvarclass => "${class_prefix}_noop.!${class_prefix}_kept.!${class_prefix}_repaired.!${class_prefix}_error";

      "success"
        usebundle  => _rudder_common_report("${technique_name}", "${class_prefix}", "audit_compliant", "${identifier}", "${component_name}", "${component_key}", "${message_prefix} was correct"),
        ifvarclass => "(${class_prefix}_kept|${class_prefix}_repaired).!${class_prefix}_error";

      "noncompliant"
        usebundle  => _rudder_common_report("${technique_name}", "${class_prefix}", "audit_noncompliant", "${identifier}", "${component_name}", "${component_key}", "${message_prefix} was not correct"),
        ifvarclass => "${class_prefix}_error";
}


# Create and send a report to the server
# This bundle takes 7 parameters :
# technique_name : the name of the technique, human readable
# status         : the status of the Component, among the following values
#    result_na
#    result_success
#    result_error
#    result_repaired
#    log_repaired (for logging only)
#    log_warn     (for logging only)
#    log_info     (for logging only)
#    log_debug    (for logging only)
#    log_trace    (for logging only)
# identifier     : the identifier of the current Rule and Directive
# component_name : the name of the component within the Technique
# component_key  : the value of the component reference variable (or None if undefined)
# message        : An explanation message understandable by a human
# enforce_mode   : Define the mode of reporting: enforce or audit -> remap result_* to audit_ *
bundle agent _rudder_common_report_hooks(technique_name, status, identifier, component_name, component_key, message, enforce_mode)
{
  vars:
    is_enforce::
      "resulting_status" string => "${status}";

    !is_enforce.pass1.result_na::
      "resulting_status" string => "audit_na";
    !is_enforce.pass1.result_success::
      "resulting_status" string => "audit_compliant";
    !is_enforce.pass1.result_repaired::
      "resulting_status" string => "audit_compliant"; # this is a specific case for hooks
    !is_enforce.pass1.result_error::
      "resulting_status" string => "audit_noncompliant";

    !is_enforce.pass1.!(result_na|result_success|result_repaired|result_error)::
      "resulting_status" string => "${status}";

  # We cannot allow for empty component_name
  defaults:
      "component_name" string => "None", if_match_regex => "";

  classes:
      "is_enforce"      expression => strcmp("${enforce_mode}", "enforce");

      "result_na"       expression => strcmp("${status}", "result_na");
      "result_success"  expression => strcmp("${status}", "result_success");
      "result_repaired" expression => strcmp("${status}", "result_repaired");
      "result_error"    expression => strcmp("${status}", "result_error");


      "pass2" expression => "pass1";
      "pass1" expression => "any";

    changes_only::
      "send_reports" or => {
                            strcmp("${status}", "result_error") ,
                            strcmp("${status}", "result_repaired") ,
                            strcmp("${status}", "log_warn") ,
                            strcmp("${status}", "log_repaired") ,
                            strcmp("${status}", "audit_noncompliant") ,
                            strcmp("${status}", "audit_error") ,
                           };

  methods:
    # If we need to send a report, make sure we have sent the "StartRun" message first
    pass2.send_reports.!start_run_message_sent::
      "Send start message"
        usebundle => _startExecution("${identifier}"),
        action    => immediate_ignore_dry_run;

  reports:
    pass2.(!changes_only|send_reports)::
      "@@${technique_name}@@${resulting_status}@@${identifier}@@${component_name}@@${component_key}@@${g.execRun}##${g.uuid}@#${message}";
}


bundle agent _startExecution(identifier)
{
  vars:
    second_pass:: # This is necessary to work around a CFEngine bug that causes this to be defined all the time
      # Define a global class to show we have sent a "StartRun" report
      "dummy_string" string => "dummy_content",
        classes => always("start_run_message_sent");

  classes:
      # Dummy class to work around a CFEngine bug
      "second_pass" expression => "any";

  reports:
    cfengine_3::
      # Send the report and define a persistant class to store the last "heartbeat" time
      "@@Common@@log_info@@${identifier}@@common@@StartRun@@${g.execRun}##${g.uuid}@#Start execution with config [${g.rudder_node_config_id}]"
        classes => _rudder_always_classes_persist("heartbeat_sent", "${g.heartbeat_interval}");
}

#
# Always define a class, with the given persist time
# Define the class for ${persist} minutes
#
body classes _rudder_always_classes_persist(always, persist)
{
  promise_kept     => { "${always}" };
  promise_repaired => { "${always}" };
  repair_failed    => { "${always}" };
  repair_denied    => { "${always}" };
  repair_timeout   => { "${always}" };

  persist_time     => "${persist}";
}

#
# Define the current Technique we are doing report on
# Must be called before the reporting
bundle agent _method_reporting_context(c_name, c_key) {
  vars:
    "report_data.component_name" string => "${c_name}";
    "report_data.component_key"  string => "${c_key}" ;
}

bundle agent rudder_reporting_context(d_id, r_id, t_name) {
  vars:
    "report_data.technique_name"          string => "${t_name}";
    "report_data.directive_id"            string => "${d_id}";
    "report_data.canonified_directive_id" string => canonify("${d_id}");
    "report_data.rule_id"                 string => "${r_id}";
    "report_data.identifier"              string => "${r_id}@@${d_id}@@0";
}


bundle agent rudder_reporting_context_id(id, t_name) {
  vars:
    "report_data.technique_name" string => "${t_name}";
    "report_data.identifier"     string => "${id}";
}

bundle agent clean_reporting_context {
  vars:
    "report_data.component_name"          string => "";
    "report_data.component_key"           string => "";
    "report_data.technique_name"          string => "";
    "report_data.directive_id"            string => "";
    "report_data.canonified_directive_id" string => "";
    "report_data.rule_id"                 string => "";
    "report_data.identifier"              string => "";
}

bundle agent disable_reporting {
  vars:
    "report_data.should_report" string => "false";
}

bundle agent enable_reporting {
  vars:
    "report_data.should_report" string => "true";
}

