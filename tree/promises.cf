#####################################################################################
# Copyright 2013 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# Define base characteristics for the framework
# First, the path where the framework is installed
bundle common me
{
  vars:
      "framework_path" string => "${sys.workdir}/inputs";
}
# Inputs bundle
# This bundle figures out which .cf files to include.
# As a first implementation, it loads all the .cf files in the whole directory tree
#####################################################################################
bundle common inputs
{
  vars:
      "list_compatible_inputs" string => "NCF_CACHE_PATH=${sys.workdir}/state /bin/sh ${me.framework_path}/10_ncf_internals/list-compatible-inputs";

      # this list contains everything that is in the 10_ncf_internals
      "ncf_internals_files"     slist => lsdir("${me.framework_path}/10_ncf_internals", ".*\.cf", "true");

      # Here, we get all the generic files of the framework (basics, methods, it ops knowledge)
      # without their full path as it may break the 4K limit
      # see https://cfengine.com/dev/issues/2912
      "generic_framework"      string => execresult("${list_compatible_inputs} ${sys.cf_version} ${me.framework_path} 20_cfe_basics 30_generic_methods 40_it_ops_knowledge", "useshell");

      # The Techniques and Services part are choosen separatly, as we may not want to load
      # them all automatically in the future
      # This fetches the techniques cf files
      "techniques"            string  => execresult("${list_compatible_inputs} ${sys.cf_version} ${me.framework_path} 50_techniques", "useshell");
      # This fetches the services cf files
      "services"              string  => execresult("${list_compatible_inputs} ${sys.cf_version} ${me.framework_path} 60_services", "useshell");

      # We have to convert the result of the find into lists so that they can be use in the 
      # inputs list
      "generic_framework_files" slist => splitstring("${generic_framework}", "\n", 10000);
      "techniques_files"        slist => splitstring("${techniques}", "\n", 10000);
      "services_files"          slist => splitstring("${services}", "\n", 10000);    
}

##############################################################################
# Init bundle
# This bundle just displays a welcome message with some system info
# You should not have to edit this
##############################################################################
bundle agent init
{
  reports:
    cfengine::
      "${configuration.info} Starting CFEngine ${sys.cf_version} on host ${sys.fqhost} (${sys.flavour} ${sys.arch})";
    trace::
      "${configuration.trace} File read from 10_ncf_internals: ${inputs.ncf_internals_files}";
      "${configuration.trace} File read from 20_cfe_basics, 30_generic_methods, 40_it_ops_knowledge: ${inputs.generic_framework_files}";
      "${configuration.trace} File read from 50_techiques: ${inputs.techniques_files}";
      "${configuration.trace} File read from 60_services: ${inputs.services_files}";
}

##############################################################################
# End bundle
# This bundle just displays a finish message with some system info
# You should not have to edit this
##############################################################################
bundle agent end
{
  reports:
    cfengine::
      "${configuration.info} Finished CFEngine ${sys.cf_version} on host ${sys.fqhost} (${sys.flavour} ${sys.arch})";
}


##############################################################################
# Body common control
# This is the entry point for CFEngine
##############################################################################
body common control
{
    inputs => {
               @(inputs.ncf_internals_files),
               @(inputs.generic_framework_files),
               "service_mapping.cf",
               @(inputs.techniques_files),
               @(inputs.services_files),
              };

    bundlesequence => { 
                        "init",
                        "me",
                        "configuration",
                        "dispatcher",
                        "end",
                      };
}

