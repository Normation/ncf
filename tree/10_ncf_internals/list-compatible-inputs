#!/bin/sh

set -e

# Need at least 3 parameters
if [ "$#" -lt 3 ]
then
  echo "Usage $0 <CFEngine_version>[/<Rudder_version>] <ncf_framework_path> [common|local]/<nn_directory> [<nn_directory ...]"
  echo "  Finds all *.cf files in <ncf_framework>/[common|local]<nn_directory> that are compatible with the given CFEngine version"
  exit 1
fi

cfengine_version="$1"
framework_path="$2"
# see comment below on the last parameters
shift 2

# add a default path since it is emptied by cfengine, and busybox for android
PATH="/sbin:/bin:/usr/sbin:/usr/bin:/usr/locan/sbin:/usr/local/bin:/system/xbin:${PATH}"
export PATH

# split version numbers for cfengine
version_regex='\([0-9][0-9]*\)\.\([0-9][0-9]*\).*'
cfengine_major=`printf "${cfengine_version}\n" | sed -e "s/${version_regex}/\\1/"`
cfengine_minor=`printf "${cfengine_version}\n" | sed -e "s/${version_regex}/\\2/"`

# split version numbers for rudder
version_regex='.*\/\([0-9][0-9]*\)\.\([0-9][0-9]*\).*'
rudder_major=`printf "${cfengine_version}\n" | sed -e "s/${version_regex}/\\1/"`
rudder_minor=`printf "${cfengine_version}\n" | sed -e "s/${version_regex}/\\2/"`
if [ "${rudder_major}" = "${cfengine_version}" ]
then
  rudder_major=""
  rudder_minor=""
fi

# move into framework path
cd "${framework_path}"

# return true if agent_version is compatible with the tag line
version_compare() {
  file="$1"
  tag="$2"
  agent_major="$3"
  agent_minor="$4"

  tag_regex="^#[ \\t]*@${tag}[ \\t]*"

  # extract comparison operator from tag line
  operator=""
  if grep -q "${tag_regex}>=" "${file}"; then operator=">="; fi
  if grep -q "${tag_regex}<" "${file}"; then operator="<"; fi
  if [ -z "${operator}" ]; then return; fi

  # extract version from tag line
  major=`sed -ne "s/${tag_regex}${operator}[ \\t]*${version_regex}/\\1/p" "${file}"`
  minor=`sed -ne "s/${tag_regex}${operator}[ \\t]*${version_regex}/\\2/p" "${file}"`
  file_name=`basename ${file}`

  # comparison
  if [ "${operator}" = ">=" ]
  then # return true if agent_version >= wanted version
    [ "${agent_major}" -gt "${major}" ] || [ "${agent_major}" -eq "${major}"  -a "${agent_minor}" -ge "${minor}" ]
  else # return true if agent_version < wanted version
    [ "${agent_major}" -lt "${major}" ] || [ "${agent_major}" -eq "${major}" -a "${agent_minor}" -lt "${minor}" ]
  fi
}

# Last parameters not named to keep them as a quoted array
for directory in "$@"
do
  if [ "${NCF_CACHE_PATH}" = "" ]
  then
    # maintain compatibility with old callers
    exclude_file="${framework_path}/${directory}/.ncf-exclude-cache-${cfengine_version}"
  else
    # take the cache directory from environment
    exclude_basedir="${NCF_CACHE_PATH}/ncf-exclude-cache-${cfengine_version}"
    [ -d "${exclude_basedir}" ] || mkdir "${exclude_basedir}"
    canonified_path=`echo "${framework_path}/${directory}" | sed -e "s/\\//_/g"`
    exclude_file="${exclude_basedir}/${canonified_path}"
  fi

  # ignore directory if it doesn't exist
  if [ ! -d "${framework_path}/${directory}" ]; then continue; fi

  # first remove obsolete cache for exclude list
  if [ -f "${exclude_file}" ]
  then
    newer_files=`find "${directory}" -type f -newer "${exclude_file}"`
    if [ "${newer_files}" != "" ]
    then
      rm -f "${exclude_file}"
    fi
  fi

  # then create cache if it doesn't exist
  if [ -f "${exclude_file}" ]
  then
    excludes=`cat "${exclude_file}"`
  else
    for file in `find "${directory}" -name '*.cf' -exec grep -l "${tag_regex}" '{}' \;`
    do
      # if cfengine version matches, keep it
      if ! version_compare "${file}" "agent_version" "${cfengine_major}" "${cfengine_minor}"
      then
        # otherwise test if rudder version matches
        if [ -n "${rudder_major}" ] && ! version_compare "${file}" "rudder_version" "${rudder_major}" "${rudder_minor}"
          # posix compliant syntax to exclude a file
          excludes="${excludes} -name ${file_name} -prune -o"
        fi
      fi
    done  
    printf "${excludes}" > "${exclude_file}"
  fi

  # eventually call find
  # posix compliant version of find without -printf '%p\n', it should work with darwin and aix
  find "${directory}" ${excludes} -name '*.cf' -print
done

