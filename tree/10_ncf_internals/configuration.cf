#####################################################################################
# Copyright 2013 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# Config
# This bundle will read the ncf specific configuration and expose it as CFEngine variables
# Conventions:
#   The variables will be usable in the context configuration.variablename
bundle agent configuration
{

  vars:

    pass1.!ncf_override_conf_file_defined::
      "ncf_configuration_basedir"     string => dirname("${this.promise_filename}");

      "ncf_configuration_file_source" string => "${ncf_configuration_basedir}/../ncf.conf";

    pass1.ncf_override_conf_file_defined::
       "ncf_configuration_file_source" string => "${ncf_configuration.ncf_configuration_file}";

    pass1::
      # On CFEngine 3.6, we expand the template in the agent folder, so that it is not
      # overwritten by the policy server expanded version, and if there are multiple
      # agents on the node, each conf file does not compete
      "ncf_configuration_file_cache"  string => "${sys.workdir}/ncf.conf.cache";

    pass1.cfengine_3_5::
      "ncf_configuration_file"        string => "${ncf_configuration_file_source}";
    pass1.!cfengine_3_5::
      "ncf_configuration_file"        string => "${ncf_configuration_file_cache}";
      # We need to use a variable to define the bundle we call to expand template, otherwise the
      # CFEngine parser will try to resolve the non existant bundle in 3.5
      "generic_method_expansion"      string => "expand_configuration";

    pass2::
      # Read all entries from the configuration file
      "num_entries"                  int => readstringarray("ncf_config","${ncf_configuration_file}","#[^\n]*","=",100,8000);

      # See ncf.conf for reference about these variables
      "enabled_loggers"             slist => splitstring("${ncf_config[loggers][1]}",",","10");
      "cfengine_port"              string => "${ncf_config[cfengine_port][1]}";

      # Constants
      "error"                     string => "[ERROR]";
      "info"                      string => "[INFO] ";
      "debug"                     string => "[DEBUG]";
      "trace"                     string => "[TRACE]";

  classes:
      "ncf_override_conf_file_defined" expression => fileexists("${ncf_configuration.ncf_configuration_file}");

      # cfengine was patched to provide a variable to retrieve the promiser stack
      "has_promiser_stack" expression => isvariable("this.callers_promisers"),
                           scope => "namespace";

      "pass2" expression => "pass1";
      "pass1" expression => "any";

  methods:
    # We cannot use the generic method to expand template, as it rely on the logger,
    # which is not yet defined
    pass2.!cfengine_3_5::
      "expand" usebundle => ${generic_method_expansion};
}
