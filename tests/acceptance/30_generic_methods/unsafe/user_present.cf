
#######################################################
#
# Test checking user_present
#
#######################################################

bundle common acc_path
{
  vars:
    "root" string => getenv("NCF_TESTS_ACCEPTANCE", 1024);
}

body common control
{
      inputs => { "${acc_path.root}/default.cf.sub", "${acc_path.root}/default_ncf.cf.sub", "@{ncf_inputs.default_files}" };
      bundlesequence  => { configuration, default("${this.promise_filename}") };
      version => "1.0";
}

#######################################################

bundle agent init
{
  vars:
    "user"   string => "user1";
    "user1"  string => "users";
}

#######################################################

bundle agent test
{
  methods:
    "ph1" usebundle => user_present("${init.user}");
    "ph2" usebundle => user_present("${init.user1}");
}

#######################################################

bundle agent check
{
  vars:
    pass1::
      "user_line" string => execresult("/bin/grep '^${init.user}:' /etc/passwd", "useshell");
      "user_line1" string => execresult("/bin/grep '^${init.user1}:' /etc/passwd", "useshell");

  classes:
    pass1::
      "user_ok" expression => regcmp("^(${init.user}):x:([0-9]+):\2::\/home\/\1:", "${user_line}");
      "user1_ok" expression => strcmp("", "${user_line1}");

      "ph_ok" expression => "!user_present_${init.user}_kept.user_present_${init.user}_repaired.!user_present_${init.user}_error";
      "ph1_ok" expression => "!user_present_${init.user1}_kept.!user_present_${init.user1}_repaired.user_present_${init.user1}_error";

      "ok" expression => "user_ok.user1_ok.ph_ok.ph1_ok";
    
    any::
      "pass1" expression => "any";

  commands:
    pass1::
      "/usr/sbin/userdel ${init.user}"  handle => "h1";
      #"/usr/sbin/userdel ${init.user1}" handle => "h2";

  reports:
    pass1.ok::
      "$(this.promise_filename) Pass";
    pass1.!ok::
      "$(this.promise_filename) FAIL";
    pass1.user_ok::
      "user_ok";
    pass1.user1_ok::
      "user1_ok";
    pass1.ph_ok::
      "ph_ok";
    pass1.ph1_ok::
      "ph1_ok";
}
