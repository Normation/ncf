
#######################################################
#
# Test checking user_primary_group
#
#######################################################

bundle common acc_path
{
  vars:
    "root" string => getenv("NCF_TESTS_ACCEPTANCE", 1024);
}

body common control
{
      inputs => { "${acc_path.root}/default.cf.sub", "${acc_path.root}/default_ncf.cf.sub", "@{ncf_inputs.default_files}" };
      bundlesequence  => { configuration, default("${this.promise_filename}") };
      version => "1.0";
}

#######################################################

bundle agent init
{
  vars:
    "user1"          string => "user1";
    "user2"          string => "user2";
    "user3"          string => "user3";
    "primary_group1" string => "users";
    "primary_group2" string => "anonexistantgroup";
    "gid1"              int => getgid("${primary_group1}");
}

#######################################################

bundle agent test
{
  vars:
    "uid1"              int => getuid("${init.user1}");
    "uid2"              int => getuid("${init.user2}");
  methods:
    "ph1" usebundle => user_present("${init.user1}");
    "ph2" usebundle => user_present("${init.user2}");
    "ph3" usebundle => user_primary_group("${init.user1}", "${init.primary_group1}");
    "ph4" usebundle => user_primary_group("${init.user2}", "${init.primary_group2}");
    "ph5" usebundle => user_primary_group("${init.user3}", "${init.primary_group1}");
}

#######################################################

bundle agent check
{
  vars:
    pass1::
      "user_line1" string => execresult("/bin/grep '^${init.user1}:' /etc/passwd", "useshell");
      "user_line2" string => execresult("/bin/grep '^${init.user2}:' /etc/passwd", "useshell");
      "user_line3" string => execresult("/bin/grep '^${init.user3}:' /etc/passwd", "useshell");

  classes:
    pass1::
      "user1_ok" expression  => regcmp("(${init.user1}):x:${test.uid1}:${init.gid1}::\/home\/\1:", "${user_line1}");
      "user2_ok" expression  => regcmp("${init.user2}:x:${test.uid2}:.*", "${user_line2}");
      "user3_ok" expression  => strcmp("", "${user_line3}");

      "ph1_ok" expression => "!user_present_${init.user1}_kept.user_present_${init.user1}_repaired.!user_present_${init.user1}_error";
      "ph2_ok" expression => "!user_present_${init.user2}_kept.user_present_${init.user2}_repaired.!user_present_${init.user2}_error";
      "ph3_ok" expression => "!user_primary_group_${init.user1}_kept.user_primary_group_${init.user1}_repaired.!user_primary_group_${init.user1}_error";
      "ph4_ok" expression => "!user_primary_group_${init.user2}_kept.!user_primary_group_${init.user2}_repaired.user_primary_group_${init.user2}_error";
      "ph5_ok" expression => "!user_primary_group_${init.user3}_kept.!user_primary_group_${init.user3}_repaired.user_primary_group_${init.user3}_error";

      "ok" expression => "user1_ok.user2_ok.user3_ok.ph1_ok.ph2_ok.ph3_ok.ph4_ok.ph5_ok";
    
    any::
      "pass1" expression => "any";

  commands:
    pass1::
      "/usr/sbin/groupdel ${init.user1}" handle => "h1";
      "/usr/sbin/userdel  ${init.user1}" handle => "h2";
      "/usr/sbin/userdel  ${init.user2}" handle => "h3";
      "/usr/sbin/userdel  ${init.user3}" handle => "h4";

  reports:
    pass1.ok::
      "$(this.promise_filename) Pass";
    pass1.!ok::
      "$(this.promise_filename) FAIL";
    pass1.user1_ok::
      "user1_ok";
    pass1.user2_ok::
      "user2_ok";
    pass1.user3_ok::
      "user3_ok";
    pass1.ph1_ok::
      "ph1_ok";
    pass1.ph2_ok::
      "ph2_ok";
    pass1.ph3_ok::
      "ph3_ok";
    pass1.ph4_ok::
      "ph4_ok";
    pass1.ph5_ok::
      "ph5_ok";
}

