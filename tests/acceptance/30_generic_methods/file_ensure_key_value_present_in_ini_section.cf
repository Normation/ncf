#######################################################
#
# Test checking if a key-value pair is present in a section file
#
#######################################################

bundle common acc_path
{
  vars:
    "root" string => getenv("NCF_TESTS_ACCEPTANCE", 1024);
}

body common control
{
      inputs => { "${acc_path.root}/default.cf.sub", "${acc_path.root}/default_ncf.cf.sub", "@{ncf_inputs.default_files}" };
      bundlesequence  => { default("${this.promise_filename}") };
      version => "1.0";
}

#######################################################
bundle agent init
{
  vars:
    "tmp"             string => getenv("TEMP", 1024);
    "file_1"            string => "${tmp}/test1.ini";
    "reference_file_1"  string => "${tmp}/ref1.ini";
    "file_1_canon"      string => canonify("${file_1}");
    "file_2"            string => "${tmp}/test2.ini";
    "reference_file_2"  string => "${tmp}/ref2.ini";
    "file_2_canon"      string => canonify("${file_2}");
    "file_3"            string => "${tmp}/test3.ini";
    "reference_file_3"  string => "${tmp}/ref3.ini";
    "file_3_canon"      string => canonify("${file_3}");

# First test: ensure that a line is really added into the right section
# with lines already present.
    "section_1"         string => "section_test1";
    "name_1"            string => "name";
    "value_1"           string => "value";
    "base_text_up"      string => "[section_test1]";
    "base_text_down"    string => "[section_test2]";
    "reference_1"       string => "${base_text_up}
${name_1}=${value_1}
${base_text_down}";

# Second test: ensure that if the section does not exist, it will be created
#  and the lines added
    "section_2"         string => "section_test2";
    "name_2"            string => "name";
    "value_2"           string => "value";
    "reference_2"       string => "${base_text_down}
${name_2}=${value_2}
${base_text_up}";

# Third test: ensure that if the line already exists, it will be modified
    "section_3"         string => "section_test1";
    "name_3"            string => "name";
    "value_3"           string => "value";
    "new_value_3"       string => "newvalue";
    "reference_3"       string => "${base_text_up}
${name_3}=${new_value_3}";

  commands:
# Initialize first test files
    "/bin/echo"
      args    => "\"${reference_1}\" > \"${reference_file_1}\"",
      contain => in_shell;
   "/bin/echo"
      args    => "\"${base_text_up}\" > \"${file_1}\"",
      contain => in_shell;
   "/bin/echo"
      args    => "\"${base_text_down}\" >> \"${file_1}\"",
      contain => in_shell;
# Initialize second test files
    "/bin/echo"
      args    => "\"${reference_2}\" > \"${reference_file_2}\"",
      contain => in_shell;
   "/bin/echo"
      args    => "\"${base_text_up}\" > \"${file_2}\"",
      contain => in_shell;
# Initialize third test files
    "/bin/echo"
      args    => "\"${reference_3}\" > \"${reference_file_3}\"",
      contain => in_shell;
   "/bin/echo"
      args    => "\"${base_text_up}\" > \"${file_3}\"",
      contain => in_shell;
  "/bin/echo"
      args    => "\"${name_3}=${value_3}\" > \"${file_3}\"",
      contain => in_shell;

}

#######################################################

bundle agent test
{
  methods:
    "ph1" usebundle => file_ensure_key_value_present_in_ini_section("${init.file_1}", "${init.section_1}", "${init.name_1}", "${init.value_1}");
    "ph2" usebundle => file_ensure_key_value_present_in_ini_section("${init.file_2}", "${init.section_2}", "${init.name_2}", "${init.value_2}");
    "ph3" usebundle => file_ensure_key_value_present_in_ini_section("${init.file_3}", "${init.section_3}", "${init.name_3}", "${init.new_value_3}");
}

#######################################################

bundle agent check
{
  vars:
    # Commands to check that reference files (expected result) are the same
    # than the modified files by the generic_method 'file_ensure_key_value_present_in_ini_section'
    "line_1_exists_test" string => "/usr/bin/diff \"${init.reference_file_1}\" \"${init.file_1}\"";
    "line_2_exists_test" string => "/usr/bin/diff \"${init.reference_file_2}\" \"${init.file_2}\"";
    "line_3_exists_test" string => "/usr/bin/diff \"${init.reference_file_3}\" \"${init.file_3}\"";

  classes:
    "line_1_exists"
       expression => returnszero("${line_1_exists_test}", "noshell"),
       ifvarclass => canonify("file_ensure_key_value_present_in_ini_section_${init.file_1}_reached");
    "line_2_exists"
       expression => returnszero("${line_2_exists_test}", "noshell"),
       ifvarclass => canonify("file_ensure_key_value_present_in_ini_section_${init.file_2}_reached");
    "line_3_exists"
       expression => returnszero("${line_3_exists_test}", "noshell"),
       ifvarclass => canonify("file_ensure_key_value_present_in_ini_section_${init.file_3}_reached");

    "ok_test1"    expression => "line_1_exists.file_ensure_key_value_present_in_ini_section_${init.file_1_canon}_ok.!file_1_ensure_line_present_in_ini_section_${init.file_1_canon}_error";
    "ok_test2"    expression => "line_2_exists.file_ensure_key_value_present_in_ini_section_${init.file_2_canon}_ok.!file_2_ensure_line_present_in_ini_section_${init.file_2_canon}_error";
    "ok_test3"    expression => "line_3_exists.file_ensure_key_value_present_in_ini_section_${init.file_3_canon}_ok.!file_3_ensure_line_present_in_ini_section_${init.file_3_canon}_error";
    "ok"          and => {"ok_test1","ok_test2","ok_test3"};

  reports:
    ok::
      "$(this.promise_filename) Pass";
    !ok::
      "$(this.promise_filename) FAIL";
    !line_1_exists::
      "diff command doesn't return 0 for command: ${line_1_exists_test}";
}
