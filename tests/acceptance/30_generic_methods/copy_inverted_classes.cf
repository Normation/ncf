#######################################################
#
# This is a sample test file to copy when creating a
# new test. Please keep it updated with best practices.
#
#######################################################

bundle common acc_path
{
  vars:
    "root" string => getenv("NCF_TESTS_ACCEPTANCE", 1024);
}

body common control
{
      inputs => { "${acc_path.root}/default.cf.sub", "${acc_path.root}/default_ncf.cf.sub", "@{ncf_inputs.default_files}" };
      bundlesequence  => { default("$(this.promise_filename)") };
      version => "1.0";
}

#######################################################

bundle agent init
{
  vars:
    "tmp"         string => getenv("TEMP", 1024);
    "file"        string => "${tmp}/test";
    "file_canon"  string => canonify("${file}");
    "line_to_add" string => "This is a test line!";
}

#######################################################

bundle agent test
{
  vars:
    "local_var1"
           string => "foo",
           classes => always("global_class1_kept"),
           classes => always("global_class1_not_repaired"),
           classes => always("promise_kept_global_class1"),
           classes => always("global_class1_ok"),
           classes => always("global_class1_reached");
    "local_var2"
           string => "foo",
           classes => always("global_class2_repaired"),
           classes => always("global_class2_not_kept"),
           classes => always("promise_repaired_global_class2"),
           classes => always("global_class2_ok"),
           classes => always("global_class2_reached");
    "local_var3"
           string => "foo",
           classes => always("global_class3_error"),
           classes => always("global_class3_failed"),
           classes => always("global_class3_repair_failed"),
           classes => always("global_class3_not_ok"),
           classes => always("global_class3_not_kept"),
           classes => always("global_class3_not_repaired"),
           classes => always("global_class3_reached"),
           classes => always("global_class3_timeout"),
           classes => always("global_class3_repair_timeout");



  methods:
    "ph1"  usebundle => _classes_inverted_copy("global_class1","global_classA");
    "ph2"  usebundle => _classes_inverted_copy("global_class2","global_classB");
    "ph3"  usebundle => _classes_inverted_copy("global_class3","global_classC");

}

#######################################################

bundle agent check
{
  classes:
      "ok" expression => "(global_classA_repaired.global_classA_not_kept.promise_repaired_global_classA.global_classA_ok.global_classA_reached).(global_classB_kept.global_classB_not_repaired.promise_kept_global_classB.global_classB_ok.global_classB_reached).(global_classC_error.global_classC_failed.global_classC_repair_failed.global_classC_not_ok.global_classC_not_kept.global_classC_not_repaired.global_classC_reached.global_classC_timeout.global_classC_repair_timeout)";

  reports:
    ok::
      "$(this.promise_filename) Pass";
    !ok::
      "$(this.promise_filename) FAIL";
}
