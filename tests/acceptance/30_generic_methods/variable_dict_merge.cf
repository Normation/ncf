#######################################################
#
# Create a dict variable by merging two other variables
#
#######################################################

bundle common acc_path
{
  vars:
    "root" string => getenv("NCF_TESTS_ACCEPTANCE", 1024);
}

body common control
{
      inputs => { "${acc_path.root}/default.cf.sub", "${acc_path.root}/default_ncf.cf.sub", "@{ncf_inputs.default_files}" };
      bundlesequence  => { configuration, default("${this.promise_filename}") };
      version => "1.0";
}

#######################################################

bundle agent init
{
  vars:

    "dict1" data => parsejson('{ "key1": "value1", "key2": "value2", "key3": { "keyx": "valuex" }, "key4": [ "valuey" ] }');
    "dict2" data => parsejson('{ "key1": "value1bis", "key4": "value4" }');
    "ref" string => '{
  "key1": "value1bis",
  "key2": "value2",
  "key3": {
    "keyx": "valuex"
  },
  "key4": "value4"
}';
    # CFEngine 3.6 has different output
    "ref2" string => '{
  "key2": "value2",
  "key3": {
    "keyx": "valuex"
  },
  "key1": "value1bis",
  "key4": "value4"
}';

}

#######################################################

bundle agent test
{
  methods:
    "ph3" usebundle => variable_dict_merge("prefix", "var3", "init.dict1", "init.dict2");
}

#######################################################

bundle agent check
{
  vars:
    "result" string => storejson("prefix.var3");

  classes:
    
    "ok_class" expression => "variable_dict_merge_var3_kept.!variable_dict_merge_var3_repaired.!variable_dict_merge_var3_error";
    "ok_value" expression => strcmp("${result}", "${init.ref}");
    "ok_value" expression => strcmp("${result}", "${init.ref2}");

    "ok"  expression => "ok_class.ok_value";

  reports:
    ok::
      "$(this.promise_filename) Pass";
    !ok::
      "$(this.promise_filename) FAIL";
}
